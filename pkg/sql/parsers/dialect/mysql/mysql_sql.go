// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const INCREMENT = 57651
const CYCLE = 57652
const MINVALUE = 57653
const PUBLICATION = 57654
const SUBSCRIPTIONS = 57655
const PUBLICATIONS = 57656
const PROPERTIES = 57657
const PARSER = 57658
const VISIBLE = 57659
const INVISIBLE = 57660
const BTREE = 57661
const HASH = 57662
const RTREE = 57663
const BSI = 57664
const IVFFLAT = 57665
const MASTER = 57666
const ZONEMAP = 57667
const LEADING = 57668
const BOTH = 57669
const TRAILING = 57670
const UNKNOWN = 57671
const LISTS = 57672
const OP_TYPE = 57673
const REINDEX = 57674
const EXPIRE = 57675
const ACCOUNT = 57676
const ACCOUNTS = 57677
const UNLOCK = 57678
const DAY = 57679
const NEVER = 57680
const PUMP = 57681
const MYSQL_COMPATIBILITY_MODE = 57682
const UNIQUE_CHECK_ON_AUTOINCR = 57683
const MODIFY = 57684
const CHANGE = 57685
const SECOND = 57686
const ASCII = 57687
const COALESCE = 57688
const COLLATION = 57689
const HOUR = 57690
const MICROSECOND = 57691
const MINUTE = 57692
const MONTH = 57693
const QUARTER = 57694
const REPEAT = 57695
const REVERSE = 57696
const ROW_COUNT = 57697
const WEEK = 57698
const REVOKE = 57699
const FUNCTION = 57700
const PRIVILEGES = 57701
const TABLESPACE = 57702
const EXECUTE = 57703
const SUPER = 57704
const GRANT = 57705
const OPTION = 57706
const REFERENCES = 57707
const REPLICATION = 57708
const SLAVE = 57709
const CLIENT = 57710
const USAGE = 57711
const RELOAD = 57712
const FILE = 57713
const TEMPORARY = 57714
const ROUTINE = 57715
const EVENT = 57716
const SHUTDOWN = 57717
const NULLX = 57718
const AUTO_INCREMENT = 57719
const APPROXNUM = 57720
const SIGNED = 57721
const UNSIGNED = 57722
const ZEROFILL = 57723
const ENGINES = 57724
const LOW_CARDINALITY = 57725
const AUTOEXTEND_SIZE = 57726
const ADMIN_NAME = 57727
const RANDOM = 57728
const SUSPEND = 57729
const ATTRIBUTE = 57730
const HISTORY = 57731
const REUSE = 57732
const CURRENT = 57733
const OPTIONAL = 57734
const FAILED_LOGIN_ATTEMPTS = 57735
const PASSWORD_LOCK_TIME = 57736
const UNBOUNDED = 57737
const SECONDARY = 57738
const RESTRICTED = 57739
const USER = 57740
const IDENTIFIED = 57741
const CIPHER = 57742
const ISSUER = 57743
const X509 = 57744
const SUBJECT = 57745
const SAN = 57746
const REQUIRE = 57747
const SSL = 57748
const NONE = 57749
const PASSWORD = 57750
const SHARED = 57751
const EXCLUSIVE = 57752
const MAX_QUERIES_PER_HOUR = 57753
const MAX_UPDATES_PER_HOUR = 57754
const MAX_CONNECTIONS_PER_HOUR = 57755
const MAX_USER_CONNECTIONS = 57756
const FORMAT = 57757
const VERBOSE = 57758
const CONNECTION = 57759
const TRIGGERS = 57760
const PROFILES = 57761
const LOAD = 57762
const INLINE = 57763
const INFILE = 57764
const TERMINATED = 57765
const OPTIONALLY = 57766
const ENCLOSED = 57767
const ESCAPED = 57768
const STARTING = 57769
const LINES = 57770
const ROWS = 57771
const IMPORT = 57772
const DISCARD = 57773
const JSONTYPE = 57774
const MODUMP = 57775
const OVER = 57776
const PRECEDING = 57777
const FOLLOWING = 57778
const GROUPS = 57779
const DATABASES = 57780
const TABLES = 57781
const SEQUENCES = 57782
const EXTENDED = 57783
const FULL = 57784
const PROCESSLIST = 57785
const FIELDS = 57786
const COLUMNS = 57787
const OPEN = 57788
const ERRORS = 57789
const WARNINGS = 57790
const INDEXES = 57791
const SCHEMAS = 57792
const NODE = 57793
const LOCKS = 57794
const ROLES = 57795
const TABLE_NUMBER = 57796
const COLUMN_NUMBER = 57797
const TABLE_VALUES = 57798
const TABLE_SIZE = 57799
const NAMES = 57800
const GLOBAL = 57801
const PERSIST = 57802
const SESSION = 57803
const ISOLATION = 57804
const LEVEL = 57805
const READ = 57806
const WRITE = 57807
const ONLY = 57808
const REPEATABLE = 57809
const COMMITTED = 57810
const UNCOMMITTED = 57811
const SERIALIZABLE = 57812
const LOCAL = 57813
const EVENTS = 57814
const PLUGINS = 57815
const CURRENT_TIMESTAMP = 57816
const DATABASE = 57817
const CURRENT_TIME = 57818
const LOCALTIME = 57819
const LOCALTIMESTAMP = 57820
const UTC_DATE = 57821
const UTC_TIME = 57822
const UTC_TIMESTAMP = 57823
const REPLACE = 57824
const CONVERT = 57825
const SEPARATOR = 57826
const TIMESTAMPDIFF = 57827
const CURRENT_DATE = 57828
const CURRENT_USER = 57829
const CURRENT_ROLE = 57830
const SECOND_MICROSECOND = 57831
const MINUTE_MICROSECOND = 57832
const MINUTE_SECOND = 57833
const HOUR_MICROSECOND = 57834
const HOUR_SECOND = 57835
const HOUR_MINUTE = 57836
const DAY_MICROSECOND = 57837
const DAY_SECOND = 57838
const DAY_MINUTE = 57839
const DAY_HOUR = 57840
const YEAR_MONTH = 57841
const SQL_TSI_HOUR = 57842
const SQL_TSI_DAY = 57843
const SQL_TSI_WEEK = 57844
const SQL_TSI_MONTH = 57845
const SQL_TSI_QUARTER = 57846
const SQL_TSI_YEAR = 57847
const SQL_TSI_SECOND = 57848
const SQL_TSI_MINUTE = 57849
const RECURSIVE = 57850
const CONFIG = 57851
const DRAINER = 57852
const SOURCE = 57853
const STREAM = 57854
const HEADERS = 57855
const CONNECTOR = 57856
const CONNECTORS = 57857
const DAEMON = 57858
const PAUSE = 57859
const CANCEL = 57860
const TASK = 57861
const RESUME = 57862
const MATCH = 57863
const AGAINST = 57864
const BOOLEAN = 57865
const LANGUAGE = 57866
const WITH = 57867
const QUERY = 57868
const EXPANSION = 57869
const WITHOUT = 57870
const VALIDATION = 57871
const UPGRADE = 57872
const RETRY = 57873
const ADDDATE = 57874
const BIT_AND = 57875
const BIT_OR = 57876
const BIT_XOR = 57877
const CAST = 57878
const COUNT = 57879
const APPROX_COUNT = 57880
const APPROX_COUNT_DISTINCT = 57881
const SERIAL_EXTRACT = 57882
const APPROX_PERCENTILE = 57883
const CURDATE = 57884
const CURTIME = 57885
const DATE_ADD = 57886
const DATE_SUB = 57887
const EXTRACT = 57888
const GROUP_CONCAT = 57889
const MAX = 57890
const MID = 57891
const MIN = 57892
const NOW = 57893
const POSITION = 57894
const SESSION_USER = 57895
const STD = 57896
const STDDEV = 57897
const MEDIAN = 57898
const CLUSTER_CENTERS = 57899
const KMEANS = 57900
const STDDEV_POP = 57901
const STDDEV_SAMP = 57902
const SUBDATE = 57903
const SUBSTR = 57904
const SUBSTRING = 57905
const SUM = 57906
const SYSDATE = 57907
const SYSTEM_USER = 57908
const TRANSLATE = 57909
const TRIM = 57910
const VARIANCE = 57911
const VAR_POP = 57912
const VAR_SAMP = 57913
const AVG = 57914
const RANK = 57915
const ROW_NUMBER = 57916
const DENSE_RANK = 57917
const BIT_CAST = 57918
const BITMAP_BIT_POSITION = 57919
const BITMAP_BUCKET_NUMBER = 57920
const BITMAP_COUNT = 57921
const BITMAP_CONSTRUCT_AGG = 57922
const BITMAP_OR_AGG = 57923
const NEXTVAL = 57924
const SETVAL = 57925
const CURRVAL = 57926
const LASTVAL = 57927
const ARROW = 57928
const ROW = 57929
const OUTFILE = 57930
const HEADER = 57931
const MAX_FILE_SIZE = 57932
const FORCE_QUOTE = 57933
const PARALLEL = 57934
const STRICT = 57935
const UNUSED = 57936
const BINDINGS = 57937
const DO = 57938
const DECLARE = 57939
const LOOP = 57940
const WHILE = 57941
const LEAVE = 57942
const ITERATE = 57943
const UNTIL = 57944
const CALL = 57945
const PREV = 57946
const SLIDING = 57947
const FILL = 57948
const SPBEGIN = 57949
const BACKEND = 57950
const SERVERS = 57951
const HANDLER = 57952
const PERCENT = 57953
const SAMPLE = 57954
const MO_TS = 57955
const PITR = 57956
const CDC = 57957
const LOGSERVICE = 57958
const REPLICAS = 57959
const STORES = 57960
const SETTINGS = 57961
const KILL = 57962
const BACKUP = 57963
const FILESYSTEM = 57964
const PARALLELISM = 57965
const RESTORE = 57966
const QUERY_RESULT = 57967

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12460

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 136,
	11, 781,
	22, 781,
	-2, 774,
	-1, 159,
	240, 1190,
	242, 1089,
	-2, 1136,
	-1, 186,
	43, 604,
	242, 604,
	269, 611,
	270, 611,
	466, 604,
	-2, 639,
	-1, 225,
	646, 1949,
	-2, 508,
	-1, 530,
	646, 2071,
	-2, 394,
	-1, 588,
	646, 2130,
	-2, 392,
	-1, 589,
	646, 2131,
	-2, 393,
	-1, 590,
	646, 2132,
	-2, 395,
	-1, 723,
	321, 178,
	438, 178,
	439, 178,
	-2, 1853,
	-1, 789,
	83, 1639,
	-2, 2007,
	-1, 790,
	83, 1657,
	-2, 1978,
	-1, 794,
	83, 1658,
	-2, 2006,
	-1, 827,
	83, 1566,
	-2, 2204,
	-1, 828,
	83, 1567,
	-2, 2203,
	-1, 829,
	83, 1568,
	-2, 2193,
	-1, 830,
	83, 2165,
	-2, 2186,
	-1, 831,
	83, 2166,
	-2, 2187,
	-1, 832,
	83, 2167,
	-2, 2195,
	-1, 833,
	83, 2168,
	-2, 2175,
	-1, 834,
	83, 2169,
	-2, 2184,
	-1, 835,
	83, 2170,
	-2, 2196,
	-1, 836,
	83, 2171,
	-2, 2197,
	-1, 837,
	83, 2172,
	-2, 2202,
	-1, 838,
	83, 2173,
	-2, 2207,
	-1, 839,
	83, 2174,
	-2, 2208,
	-1, 840,
	83, 1635,
	-2, 2045,
	-1, 841,
	83, 1636,
	-2, 1837,
	-1, 842,
	83, 1637,
	-2, 2054,
	-1, 843,
	83, 1638,
	-2, 1846,
	-1, 845,
	83, 1641,
	-2, 1854,
	-1, 846,
	83, 1642,
	-2, 2078,
	-1, 848,
	83, 1645,
	-2, 1873,
	-1, 850,
	83, 1647,
	-2, 2090,
	-1, 851,
	83, 1648,
	-2, 2089,
	-1, 852,
	83, 1649,
	-2, 1917,
	-1, 853,
	83, 1650,
	-2, 2002,
	-1, 856,
	83, 1653,
	-2, 2101,
	-1, 858,
	83, 1655,
	-2, 2104,
	-1, 859,
	83, 1656,
	-2, 2106,
	-1, 860,
	83, 1659,
	-2, 2114,
	-1, 861,
	83, 1660,
	-2, 1987,
	-1, 862,
	83, 1661,
	-2, 2032,
	-1, 863,
	83, 1662,
	-2, 1997,
	-1, 864,
	83, 1663,
	-2, 2022,
	-1, 875,
	83, 1544,
	-2, 2198,
	-1, 876,
	83, 1545,
	-2, 2199,
	-1, 877,
	83, 1546,
	-2, 2200,
	-1, 977,
	461, 639,
	462, 639,
	-2, 605,
	-1, 1026,
	125, 1837,
	136, 1837,
	156, 1837,
	-2, 1811,
	-1, 1144,
	22, 808,
	-2, 757,
	-1, 1250,
	11, 781,
	22, 781,
	-2, 1424,
	-1, 1332,
	22, 808,
	-2, 757,
	-1, 1678,
	83, 1710,
	-2, 2004,
	-1, 1679,
	83, 1711,
	-2, 2005,
	-1, 1848,
	84, 961,
	-2, 967,
	-1, 2293,
	108, 1128,
	152, 1128,
	191, 1128,
	194, 1128,
	282, 1128,
	-2, 1121,
	-1, 2445,
	11, 781,
	22, 781,
	-2, 902,
	-1, 2478,
	84, 1797,
	157, 1797,
	-2, 1989,
	-1, 2479,
	84, 1797,
	157, 1797,
	-2, 1988,
	-1, 2480,
	84, 1773,
	157, 1773,
	-2, 1975,
	-1, 2481,
	84, 1774,
	157, 1774,
	-2, 1980,
	-1, 2482,
	84, 1775,
	157, 1775,
	-2, 1905,
	-1, 2483,
	84, 1776,
	157, 1776,
	-2, 1899,
	-1, 2484,
	84, 1777,
	157, 1777,
	-2, 1827,
	-1, 2485,
	84, 1778,
	157, 1778,
	-2, 1977,
	-1, 2486,
	84, 1779,
	157, 1779,
	-2, 1903,
	-1, 2487,
	84, 1780,
	157, 1780,
	-2, 1898,
	-1, 2488,
	84, 1781,
	157, 1781,
	-2, 1887,
	-1, 2489,
	84, 1797,
	157, 1797,
	-2, 1888,
	-1, 2490,
	84, 1797,
	157, 1797,
	-2, 1889,
	-1, 2492,
	84, 1786,
	157, 1786,
	-2, 2022,
	-1, 2493,
	84, 1763,
	157, 1763,
	-2, 2007,
	-1, 2494,
	84, 1795,
	157, 1795,
	-2, 1978,
	-1, 2495,
	84, 1795,
	157, 1795,
	-2, 2006,
	-1, 2496,
	84, 1795,
	157, 1795,
	-2, 1855,
	-1, 2497,
	84, 1793,
	157, 1793,
	-2, 1997,
	-1, 2498,
	84, 1790,
	157, 1790,
	-2, 1878,
	-1, 2499,
	83, 1744,
	84, 1744,
	157, 1744,
	396, 1744,
	397, 1744,
	398, 1744,
	-2, 1826,
	-1, 2500,
	83, 1745,
	84, 1745,
	157, 1745,
	396, 1745,
	397, 1745,
	398, 1745,
	-2, 1828,
	-1, 2501,
	83, 1746,
	84, 1746,
	157, 1746,
	396, 1746,
	397, 1746,
	398, 1746,
	-2, 2050,
	-1, 2502,
	83, 1748,
	84, 1748,
	157, 1748,
	396, 1748,
	397, 1748,
	398, 1748,
	-2, 1979,
	-1, 2503,
	83, 1750,
	84, 1750,
	157, 1750,
	396, 1750,
	397, 1750,
	398, 1750,
	-2, 1959,
	-1, 2504,
	83, 1752,
	84, 1752,
	157, 1752,
	396, 1752,
	397, 1752,
	398, 1752,
	-2, 1904,
	-1, 2505,
	83, 1754,
	84, 1754,
	157, 1754,
	396, 1754,
	397, 1754,
	398, 1754,
	-2, 1883,
	-1, 2506,
	83, 1755,
	84, 1755,
	157, 1755,
	396, 1755,
	397, 1755,
	398, 1755,
	-2, 1884,
	-1, 2507,
	83, 1757,
	84, 1757,
	157, 1757,
	396, 1757,
	397, 1757,
	398, 1757,
	-2, 1825,
	-1, 2508,
	84, 1800,
	157, 1800,
	396, 1800,
	397, 1800,
	398, 1800,
	-2, 1860,
	-1, 2509,
	84, 1800,
	157, 1800,
	396, 1800,
	397, 1800,
	398, 1800,
	-2, 1874,
	-1, 2510,
	84, 1803,
	157, 1803,
	396, 1803,
	397, 1803,
	398, 1803,
	-2, 1856,
	-1, 2511,
	84, 1803,
	157, 1803,
	396, 1803,
	397, 1803,
	398, 1803,
	-2, 1920,
	-1, 2512,
	84, 1800,
	157, 1800,
	396, 1800,
	397, 1800,
	398, 1800,
	-2, 1941,
	-1, 2725,
	108, 1128,
	152, 1128,
	191, 1128,
	194, 1128,
	282, 1128,
	-2, 1122,
	-1, 2743,
	81, 701,
	157, 701,
	-2, 1305,
	-1, 3158,
	194, 1128,
	306, 1392,
	-2, 1364,
	-1, 3336,
	108, 1128,
	152, 1128,
	191, 1128,
	194, 1128,
	-2, 1246,
	-1, 3338,
	108, 1128,
	152, 1128,
	191, 1128,
	194, 1128,
	-2, 1246,
	-1, 3350,
	81, 701,
	157, 701,
	-2, 1305,
	-1, 3371,
	194, 1128,
	306, 1392,
	-2, 1365,
	-1, 3520,
	108, 1128,
	152, 1128,
	191, 1128,
	194, 1128,
	-2, 1247,
	-1, 3546,
	84, 1208,
	157, 1208,
	-2, 1128,
	-1, 3685,
	84, 1208,
	157, 1208,
	-2, 1128,
	-1, 3844,
	84, 1212,
	157, 1212,
	-2, 1128,
	-1, 3892,
	84, 1213,
	157, 1213,
	-2, 1128,
}

const yyPrivate = 57344

const yyLast = 50572

var yyAct = [...]int{
	756, 733, 3938, 758, 3912, 2773, 214, 3931, 1934, 3848,
	1658, 3356, 3451, 3746, 3855, 3854, 3847, 3685, 3144, 3725,
	3772, 3803, 3177, 2776, 742, 3248, 3663, 1654, 3574, 2567,
	3385, 3630, 2767, 3719, 735, 3249, 1285, 3507, 3750, 3684,
	3508, 3505, 2685, 1494, 2770, 1430, 624, 3602, 786, 1025,
	3654, 1145, 3455, 1571, 3726, 3728, 1436, 3446, 3318, 1881,
	642, 3527, 648, 648, 731, 3323, 3101, 1705, 648, 665,
	674, 2340, 3372, 674, 2746, 1139, 3517, 3522, 1661, 3115,
	3339, 65, 3153, 3487, 2882, 3246, 3075, 2883, 2476, 2881,
	2027, 3104, 2041, 3308, 2863, 3173, 37, 2797, 2878, 3155,
	3341, 1991, 2064, 3162, 3288, 3234, 2946, 2139, 2602, 2474,
	2343, 2905, 3214, 1719, 1894, 3086, 1583, 2024, 2714, 3080,
	686, 2439, 682, 3124, 3078, 3082, 1487, 2304, 2097, 3076,
	3077, 2726, 3161, 725, 1135, 3073, 3050, 199, 135, 36,
	2272, 1560, 2248, 2993, 730, 2135, 2546, 2122, 2373, 2105,
	2247, 2919, 2106, 2528, 2020, 1811, 2070, 2098, 1994, 2134,
	1992, 2929, 949, 2427, 1396, 671, 2440, 2698, 1575, 2703,
	2778, 2799, 1913, 2341, 1924, 2738, 6, 1019, 2293, 1567,
	210, 8, 1406, 1572, 1363, 209, 7, 2303, 1857, 1652,
	624, 1083, 2136, 2472, 1534, 641, 1893, 1503, 1473, 2284,
	2146, 734, 2635, 2336, 743, 724, 1712, 1582, 1692, 1657,
	1419, 2104, 1643, 2169, 214, 1158, 214, 2101, 1073, 1074,
	2086, 1586, 1541, 623, 15, 648, 1856, 1603, 27, 732,
	2060, 679, 1018, 1651, 948, 1469, 986, 1720, 1525, 657,
	688, 16, 1472, 14, 2447, 33, 1853, 660, 879, 200,
	726, 925, 111, 1415, 1832, 689, 24, 1533, 192, 17,
	23, 2634, 10, 946, 931, 1330, 673, 881, 685, 1431,
	972, 1286, 644, 3737, 2143, 1034, 1052, 882, 196, 3648,
	2670, 2670, 2670, 1402, 2449, 1439, 1218, 1219, 1220, 1217,
	939, 1070, 940, 669, 3353, 3131, 2963, 670, 2962, 1218,
	1219, 1220, 1217, 1218, 1219, 1220, 1217, 2153, 1140, 3480,
	666, 3326, 668, 1141, 667, 3241, 2590, 2534, 2532, 1824,
	2529, 1544, 2531, 1548, 653, 1065, 1066, 198, 643, 920,
	2246, 1349, 1031, 1033, 1006, 649, 1399, 1400, 1401, 677,
	1075, 1471, 901, 934, 726, 930, 1066, 1066, 1053, 3060,
	899, 1069, 2252, 1071, 2256, 1352, 1595, 1140, 3043, 3040,
	3045, 1825, 3042, 3923, 1453, 2662, 2660, 1818, 1440, 1345,
	3444, 2942, 1546, 2940, 2075, 1064, 3714, 1594, 3609, 8,
	1218, 1219, 1220, 1217, 7, 3603, 1218, 1219, 1220, 1217,
	3447, 3247, 2119, 3730, 2100, 1280, 880, 3020, 2092, 2381,
	1180, 911, 3492, 3488, 2576, 891, 197, 2664, 2584, 2140,
	1358, 197, 61, 188, 160, 3340, 197, 2295, 3670, 1581,
	1047, 1042, 1037, 1041, 1045, 3635, 197, 197, 61, 188,
	160, 3783, 1836, 1833, 1590, 1511, 1357, 1355, 727, 901,
	899, 900, 197, 61, 188, 160, 3018, 1035, 1050, 898,
	3829, 197, 1040, 197, 61, 188, 160, 684, 1388, 197,
	1029, 197, 3671, 197, 1587, 197, 61, 188, 160, 1601,
	1030, 1359, 1371, 936, 2965, 929, 193, 2876, 2151, 1001,
	999, 193, 1000, 189, 933, 932, 1589, 1827, 2687, 2288,
	181, 1156, 2466, 1215, 190, 1449, 193, 193, 1450, 1598,
	2037, 914, 2467, 1048, 197, 921, 2912, 134, 2294, 2954,
	1051, 134, 193, 134, 892, 2004, 896, 1612, 1624, 3637,
	1474, 1600, 1476, 193, 2688, 928, 2732, 2547, 121, 193,
	1427, 193, 1038, 193, 1644, 193, 2454, 1648, 995, 2453,
	3044, 3041, 2455, 1208, 938, 2913, 2914, 1908, 870, 927,
	869, 871, 872, 926, 873, 874, 1049, 2005, 2006, 913,
	1660, 1647, 1213, 919, 1838, 1839, 1028, 2700, 1007, 197,
	61, 188, 160, 1027, 2730, 3717, 1195, 2701, 3468, 1196,
	3148, 3733, 1435, 2235, 1452, 917, 1434, 1437, 1438, 3732,
	1003, 1188, 1437, 1438, 1190, 3146, 1039, 3733, 3816, 3858,
	3859, 3732, 3815, 3731, 1370, 3731, 3814, 1198, 3879, 2947,
	3826, 3822, 142, 143, 2665, 144, 145, 1547, 1545, 3916,
	3917, 3805, 1191, 937, 2733, 3808, 2699, 1161, 3606, 2021,
	1754, 3250, 1664, 1153, 3743, 3805, 2571, 2155, 3250, 193,
	3720, 3721, 3722, 3723, 1150, 1649, 648, 648, 3263, 918,
	1067, 1068, 2818, 2011, 1005, 1072, 1639, 648, 1149, 3097,
	3309, 159, 1633, 195, 2948, 2689, 2949, 2147, 2015, 1646,
	3316, 3497, 3087, 1046, 2415, 2283, 674, 674, 2083, 648,
	937, 1148, 1161, 186, 159, 187, 195, 1193, 119, 2983,
	2706, 3831, 3832, 2690, 3639, 3640, 3397, 1554, 1553, 1211,
	1212, 3824, 1184, 2981, 3827, 3828, 186, 180, 179, 1043,
	1210, 1077, 1044, 67, 2581, 3095, 3467, 185, 2379, 1183,
	3445, 3621, 720, 3622, 3469, 722, 935, 2663, 1186, 1425,
	721, 1004, 2152, 2941, 3621, 2868, 3622, 1463, 3644, 3616,
	1189, 1192, 1258, 2417, 683, 1034, 1348, 1451, 3494, 1663,
	1662, 1194, 2035, 2036, 3857, 1206, 1207, 1372, 671, 671,
	3091, 3736, 2418, 2419, 3412, 924, 1185, 3647, 3266, 2987,
	2669, 3092, 3093, 3102, 182, 183, 184, 3624, 3817, 2683,
	3113, 3627, 1141, 1141, 1142, 2141, 1645, 3094, 1149, 2141,
	3624, 2469, 3292, 2359, 2141, 2423, 1141, 3176, 2130, 2339,
	2362, 3409, 1031, 1033, 1175, 191, 1205, 640, 3623, 3150,
	3887, 1290, 1054, 1036, 894, 2684, 2253, 3125, 1034, 1596,
	2964, 3623, 1289, 1163, 1162, 1826, 130, 3765, 1197, 3760,
	185, 2739, 131, 2961, 2142, 672, 1066, 2174, 1066, 1066,
	1066, 676, 1066, 1187, 675, 1141, 1066, 1155, 3174, 3175,
	895, 672, 3675, 1252, 3402, 2874, 3667, 2361, 1670, 1673,
	1674, 3669, 2154, 2290, 3051, 912, 910, 3751, 3767, 1671,
	1002, 2158, 2160, 2161, 3089, 1031, 1033, 672, 1163, 1162,
	3357, 3773, 2530, 3145, 3103, 2772, 669, 669, 1549, 132,
	670, 670, 2768, 2769, 2268, 2772, 1351, 62, 1353, 3830,
	2360, 3364, 60, 666, 666, 668, 668, 667, 667, 1152,
	1154, 1414, 3634, 62, 1368, 642, 880, 3179, 1137, 3413,
	1144, 1143, 3299, 3493, 2661, 1164, 3064, 2413, 3301, 2585,
	1328, 1030, 3742, 1333, 3565, 161, 1172, 1834, 3554, 62,
	161, 3949, 1168, 1169, 3934, 161, 2391, 3638, 949, 1259,
	2390, 62, 1174, 1426, 3458, 161, 161, 1166, 1437, 1438,
	2411, 2412, 1828, 1634, 194, 2022, 1635, 1254, 1255, 1256,
	1257, 161, 3098, 1437, 1438, 2712, 1200, 1483, 3560, 1201,
	161, 939, 161, 940, 3088, 3103, 140, 194, 161, 141,
	161, 897, 161, 672, 161, 1482, 3300, 2346, 2469, 58,
	996, 2705, 648, 2984, 1173, 1465, 1412, 1203, 3641, 1411,
	3676, 1410, 624, 624, 3668, 1429, 1428, 1433, 3774, 3655,
	3154, 624, 624, 3823, 1136, 1498, 1498, 3039, 648, 3689,
	3617, 3846, 2382, 161, 3618, 2819, 3151, 2820, 2821, 3498,
	3342, 2339, 1249, 3617, 3111, 2012, 3442, 3727, 1640, 674,
	1526, 642, 1496, 1496, 3253, 62, 1537, 1537, 2709, 2710,
	2014, 2356, 2907, 2909, 1364, 133, 45, 214, 2847, 1500,
	1301, 1302, 59, 2708, 3090, 684, 5, 624, 3802, 1470,
	3735, 1505, 3935, 998, 1180, 1380, 997, 1199, 3477, 137,
	138, 3170, 3055, 139, 3174, 3175, 1365, 1366, 161, 2577,
	1672, 2458, 1375, 1376, 1377, 1378, 1379, 2377, 1381, 3178,
	1369, 2144, 3205, 2159, 1387, 2349, 2675, 1830, 2986, 1464,
	2718, 2721, 2722, 2723, 2719, 2720, 1204, 1386, 3171, 1579,
	3567, 1385, 2816, 1384, 1584, 2345, 1555, 996, 1408, 1383,
	2347, 1593, 2924, 2925, 678, 3302, 3289, 1332, 2170, 1492,
	1493, 1202, 3575, 3576, 3577, 3581, 3579, 3580, 3578, 3688,
	941, 1334, 943, 944, 945, 1393, 1622, 1221, 1373, 2156,
	2157, 1179, 996, 2680, 3112, 1251, 1421, 1422, 2267, 2261,
	1498, 1374, 1498, 1149, 1261, 1362, 1617, 1618, 3556, 1478,
	1480, 1841, 3555, 1842, 2348, 1602, 2995, 2994, 1490, 1491,
	3478, 2838, 2839, 2346, 2349, 902, 1659, 2263, 2262, 1269,
	3845, 1395, 3561, 3562, 3932, 3933, 2376, 1034, 1360, 1361,
	998, 3057, 2260, 997, 1034, 1840, 1558, 2403, 1561, 1562,
	903, 2908, 1588, 3528, 3950, 938, 1407, 1405, 3957, 1599,
	1563, 1564, 1454, 1455, 1413, 1441, 1527, 2350, 1444, 3812,
	1498, 1423, 671, 3945, 1550, 998, 2275, 3940, 997, 1442,
	1443, 3130, 1445, 1446, 1632, 1447, 2744, 1718, 2204, 1481,
	2355, 2203, 1592, 906, 2353, 3929, 1216, 1706, 1621, 2276,
	2277, 1767, 3894, 3866, 3254, 1569, 1570, 1620, 1057, 1062,
	1063, 1146, 3860, 653, 1518, 1577, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1574, 1506,
	1407, 1578, 1703, 1704, 1538, 1524, 1539, 3842, 2848, 2850,
	2851, 2852, 2849, 2286, 905, 2837, 2149, 1656, 908, 907,
	3941, 3172, 1416, 1420, 1420, 1420, 2350, 2745, 3211, 2676,
	1831, 2345, 2339, 2344, 1216, 2342, 2347, 1149, 3895, 1008,
	3793, 1641, 1146, 1829, 2437, 3895, 3867, 1416, 1416, 3768,
	1776, 1218, 1219, 1220, 1217, 3651, 1845, 1846, 1675, 3756,
	1820, 1526, 1637, 3708, 1809, 2438, 1854, 1498, 1859, 1860,
	669, 1862, 1465, 648, 670, 3707, 1752, 2469, 648, 1653,
	3843, 1498, 1757, 1758, 1759, 949, 1630, 666, 1882, 668,
	2348, 667, 2319, 1611, 3702, 1773, 2745, 3016, 1774, 1627,
	1498, 1626, 2063, 3701, 1610, 1605, 1465, 1613, 3207, 1650,
	1631, 665, 1812, 3651, 1629, 1787, 1788, 1628, 1178, 1180,
	1625, 2549, 2149, 1766, 1642, 3305, 1655, 1216, 3265, 2285,
	3700, 1907, 3757, 2240, 1808, 2576, 3709, 3183, 1694, 3211,
	1914, 1914, 3699, 1465, 3181, 1465, 1465, 3049, 2308, 648,
	648, 3679, 1981, 1854, 1985, 1177, 3678, 1498, 1988, 1989,
	2001, 3047, 624, 3650, 2438, 1701, 1702, 3651, 1749, 1750,
	2438, 1753, 1059, 1060, 1061, 624, 3651, 1498, 3418, 1768,
	1218, 1219, 1220, 1217, 1536, 1536, 1863, 2927, 1329, 3366,
	1861, 1911, 1775, 3332, 1777, 2692, 1778, 1779, 1780, 1218,
	1219, 1220, 1217, 3651, 648, 1854, 1498, 2666, 2046, 2566,
	648, 648, 648, 682, 682, 3651, 884, 885, 886, 887,
	2056, 2057, 2058, 2059, 2149, 2554, 2318, 2065, 1936, 2149,
	2140, 1781, 1178, 3281, 214, 2003, 3651, 214, 214, 2332,
	214, 2038, 2061, 1983, 3277, 2180, 1850, 1851, 1852, 2245,
	1815, 2469, 2239, 2238, 2183, 3191, 2211, 1917, 1865, 1866,
	1867, 1868, 3367, 2902, 1180, 2131, 3333, 2641, 1810, 2033,
	1394, 2633, 1709, 1484, 3942, 1884, 1858, 3353, 2592, 2574,
	1767, 1767, 2108, 2562, 1218, 1219, 1220, 1217, 2931, 2556,
	1874, 1767, 1767, 1816, 2016, 2008, 1899, 2010, 2124, 1849,
	2030, 2031, 2048, 2049, 2050, 1999, 3282, 2028, 2029, 1888,
	2747, 2551, 1906, 1915, 2579, 1909, 1910, 3278, 1878, 1879,
	2578, 2570, 2023, 1885, 1886, 1900, 1916, 2045, 3192, 1882,
	2182, 2326, 2543, 1498, 2138, 1740, 2438, 1905, 2118, 2002,
	1216, 1918, 1919, 1883, 1216, 1665, 1666, 1667, 1668, 1669,
	1896, 1216, 2308, 2199, 1890, 2541, 2552, 2184, 2539, 2110,
	2537, 1034, 2557, 2307, 1034, 889, 1858, 647, 647, 2129,
	2068, 2074, 1034, 655, 2077, 2078, 2241, 2080, 2054, 1588,
	1607, 1266, 1165, 1987, 2552, 1891, 1892, 1710, 2132, 2218,
	2217, 1714, 1715, 1716, 1717, 1895, 1133, 1897, 1898, 1982,
	1751, 671, 1901, 1902, 1990, 2544, 1128, 2017, 1761, 3315,
	2007, 1904, 2009, 3591, 3416, 1653, 1249, 2114, 1031, 1033,
	2202, 2193, 1912, 884, 885, 886, 887, 2192, 2542, 1031,
	1033, 2538, 2103, 2538, 1458, 1459, 2308, 1461, 1462, 2044,
	1466, 1467, 1468, 2103, 2051, 2052, 2032, 2191, 1233, 2240,
	1448, 2043, 904, 2071, 2167, 2168, 3135, 2040, 2148, 2069,
	1813, 1614, 1216, 1216, 2978, 3761, 3951, 1034, 1417, 1416,
	1756, 1755, 1513, 1514, 1515, 1516, 1517, 2088, 1519, 1520,
	1521, 1522, 1523, 1420, 1756, 1755, 1529, 1530, 1531, 1532,
	3126, 3529, 1486, 1216, 1216, 1420, 3345, 3920, 2374, 1736,
	1216, 1509, 2163, 2117, 2109, 3343, 1733, 3738, 2115, 3762,
	1735, 1732, 1734, 1738, 1739, 1488, 2250, 2251, 1737, 2254,
	1216, 2128, 2257, 2120, 1031, 1033, 1489, 3649, 1403, 669,
	655, 2149, 1404, 670, 1615, 3530, 1887, 3613, 725, 3558,
	3346, 648, 648, 648, 2133, 3557, 666, 3543, 668, 3344,
	667, 1403, 2127, 3501, 2529, 1404, 648, 648, 648, 648,
	3325, 1903, 3212, 2126, 3203, 3197, 3193, 1700, 3127, 2305,
	3106, 2162, 889, 1236, 1237, 1238, 1239, 1240, 1233, 2871,
	2311, 1465, 1793, 1697, 1699, 1696, 1418, 1698, 2870, 2212,
	2213, 1694, 2215, 1485, 2072, 2164, 1786, 2716, 909, 2222,
	1218, 1219, 1220, 1217, 2671, 2589, 2171, 1465, 2176, 2555,
	2460, 3242, 3128, 2113, 3239, 2112, 1813, 2165, 2166, 2111,
	1390, 1813, 1813, 1389, 2368, 1782, 1783, 1784, 1785, 1151,
	2599, 1789, 1790, 1791, 1792, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 2523, 1713, 1542, 2177, 2072,
	1713, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1743, 1744, 1745, 1746, 1747, 1748, 1741, 1742,
	2933, 2073, 1220, 1217, 2076, 2323, 2375, 2079, 1844, 2325,
	2081, 2327, 1218, 1219, 1220, 1217, 3813, 2442, 2442, 2001,
	2442, 1217, 3570, 2533, 3569, 2950, 2808, 2234, 2236, 2237,
	771, 136, 1218, 1219, 1220, 1217, 136, 2806, 2784, 624,
	624, 2346, 2349, 2782, 3502, 3503, 3948, 1149, 3549, 3925,
	1268, 2328, 3924, 1498, 648, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1233, 1267, 2242, 2123, 3870, 2654, 648, 2655,
	1290, 3841, 2338, 2269, 1149, 2513, 642, 1771, 2337, 2287,
	2464, 1289, 1537, 3840, 2001, 3495, 3313, 2518, 3763, 2520,
	2686, 3704, 1772, 214, 2313, 2314, 654, 2477, 2859, 136,
	1034, 2857, 3692, 3682, 2316, 2317, 2331, 2312, 3672, 3947,
	2380, 2855, 3604, 2383, 2384, 2385, 2386, 2387, 2388, 2389,
	2446, 3532, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399,
	2400, 2401, 2402, 2559, 2404, 2405, 2406, 2407, 2408, 2444,
	2409, 2448, 2324, 3496, 3314, 3531, 2456, 3358, 2457, 2450,
	2572, 2844, 2351, 2352, 2138, 2357, 2858, 1031, 1033, 2856,
	2471, 1498, 3347, 1498, 3312, 1498, 2461, 2462, 2173, 2854,
	1149, 3096, 2178, 2974, 2350, 2945, 2944, 3009, 2591, 2345,
	2339, 2344, 2842, 2342, 2347, 2517, 1218, 1219, 1220, 1217,
	2582, 2841, 2840, 2586, 1542, 2334, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1222, 1498, 2619, 2315, 2420, 2320, 2843,
	2832, 2321, 2826, 2190, 2322, 2825, 1478, 1480, 2824, 2823,
	2626, 2197, 2451, 2667, 1032, 1498, 2545, 2244, 2091, 136,
	2524, 1496, 1218, 1219, 1220, 1217, 2090, 3008, 2348, 2089,
	2085, 3240, 2084, 2214, 136, 2039, 136, 2618, 2219, 2220,
	2221, 2465, 1496, 2224, 2225, 2226, 2227, 2228, 2229, 2230,
	2231, 2232, 2233, 2515, 1218, 1219, 1220, 1217, 2627, 1837,
	1835, 2514, 2522, 2673, 2674, 1608, 2516, 2677, 1347, 2715,
	3319, 647, 1138, 2047, 2630, 2631, 2468, 3324, 2603, 3081,
	2603, 2628, 1147, 720, 3944, 1149, 722, 3642, 3643, 1149,
	1420, 721, 1218, 1219, 1220, 1217, 1498, 3943, 2774, 1465,
	2607, 2601, 1131, 3452, 1171, 1985, 3918, 3886, 2693, 3885,
	3882, 3820, 2477, 2743, 2583, 2588, 3819, 3631, 3800, 2749,
	1218, 1219, 1220, 1217, 3851, 3745, 3506, 2597, 3724, 2525,
	1218, 1219, 1220, 1217, 3715, 3696, 2575, 2759, 3691, 1543,
	2580, 2658, 3690, 2573, 3646, 3633, 3632, 1149, 2568, 2569,
	2195, 1218, 1219, 1220, 1217, 2781, 2564, 3605, 3551, 1130,
	1653, 3513, 1149, 1149, 1149, 1914, 3499, 3481, 1149, 3479,
	2792, 2793, 2794, 2795, 1149, 2802, 3475, 2803, 2804, 3749,
	2805, 2727, 2807, 3472, 2609, 3471, 2787, 2788, 1034, 2593,
	2594, 2791, 3450, 2802, 2728, 3448, 2997, 2798, 3425, 3422,
	2740, 3420, 2864, 2731, 3311, 2442, 1218, 1219, 1220, 1217,
	2596, 3310, 3307, 2713, 2760, 3297, 3290, 2194, 3274, 2860,
	1936, 3272, 1218, 1219, 1220, 1217, 3200, 3199, 624, 2762,
	3194, 3189, 3188, 3107, 1985, 1149, 2001, 2001, 2001, 2001,
	3068, 2750, 2702, 3067, 1218, 1219, 1220, 1217, 1149, 2001,
	3869, 3063, 2442, 3061, 2695, 3059, 2697, 1813, 2884, 1813,
	3056, 3054, 2249, 2779, 2988, 2985, 2865, 2779, 2943, 1498,
	2917, 2884, 1218, 1219, 1220, 1217, 2775, 1813, 1813, 2853,
	648, 648, 2694, 2845, 2711, 2734, 2835, 2833, 2829, 2636,
	2637, 2786, 3473, 2748, 2828, 2642, 2827, 8, 2681, 2679,
	2742, 3461, 7, 2672, 2668, 1858, 3780, 2625, 2752, 2565,
	1536, 826, 825, 2755, 2264, 2761, 3460, 2764, 2259, 1218,
	1219, 1220, 1217, 2258, 2777, 3406, 2255, 2783, 1218, 1219,
	1220, 1217, 2898, 2094, 2814, 2815, 214, 2790, 2780, 2087,
	1843, 214, 1823, 1218, 1219, 1220, 1217, 1822, 1609, 2830,
	2831, 1512, 1218, 1219, 1220, 1217, 3269, 1398, 1356, 1354,
	2558, 3547, 2561, 1767, 2822, 1767, 1297, 1293, 2960, 1292,
	1134, 2834, 893, 3776, 2867, 3626, 2928, 3625, 2911, 3614,
	3474, 2973, 3459, 1218, 1219, 1220, 1217, 1498, 3338, 3337,
	2980, 3336, 2866, 3304, 3012, 3286, 2885, 2886, 2887, 2888,
	2872, 1218, 1219, 1220, 1217, 2869, 2751, 2899, 3284, 3283,
	2897, 3280, 3279, 3273, 2900, 2756, 2757, 3271, 2901, 3011,
	2758, 1218, 1219, 1220, 1217, 2918, 2600, 1460, 2915, 2606,
	3255, 1562, 3245, 3244, 3010, 3230, 2620, 2621, 3229, 3136,
	3071, 1563, 1564, 1034, 2623, 2624, 1218, 1219, 1220, 1217,
	3046, 1812, 3014, 1504, 1034, 3007, 2959, 2999, 2955, 2998,
	2629, 1218, 1219, 1220, 1217, 2992, 2926, 2910, 2691, 2966,
	2540, 2536, 197, 2934, 188, 160, 2535, 3002, 2938, 3004,
	2223, 2216, 136, 136, 1032, 1569, 1570, 3058, 1665, 1813,
	1577, 2936, 2957, 2935, 2932, 3062, 2210, 2209, 2208, 3065,
	3066, 2982, 2967, 1574, 2207, 2187, 1578, 1149, 2977, 2652,
	2205, 2201, 2200, 3084, 2958, 2956, 2953, 2951, 2198, 2189,
	2186, 2185, 2969, 3100, 2970, 2093, 2968, 1806, 648, 1805,
	1804, 1770, 2976, 2181, 1769, 1760, 1218, 1219, 1220, 1217,
	3116, 1149, 193, 1287, 648, 2651, 1149, 1149, 1510, 197,
	2990, 2989, 2650, 1508, 3775, 2001, 2305, 1250, 3134, 2996,
	3710, 3698, 3000, 3001, 3693, 1557, 3585, 2753, 2754, 3568,
	3005, 3006, 1218, 1219, 1220, 1217, 3564, 2368, 2649, 1218,
	1219, 1220, 1217, 3542, 3526, 3435, 3433, 3110, 3404, 3160,
	3048, 3163, 3070, 3163, 3163, 3403, 3400, 3399, 1149, 1218,
	1219, 1220, 1217, 2648, 3003, 1218, 1219, 1220, 1217, 1218,
	1219, 1220, 1217, 2727, 3365, 3362, 3052, 3184, 2647, 193,
	3360, 3327, 1034, 3053, 1034, 1498, 1498, 1568, 3180, 1034,
	1218, 1219, 1220, 1217, 1559, 3147, 3149, 1573, 3182, 3119,
	1576, 3138, 1565, 3069, 3123, 1218, 1219, 1220, 1217, 759,
	769, 1397, 1496, 1496, 2861, 1034, 3132, 2785, 2736, 760,
	2735, 761, 765, 768, 764, 762, 763, 3109, 3185, 3186,
	3143, 3221, 648, 2729, 2696, 3158, 3118, 2653, 3084, 1031,
	1033, 3121, 3122, 3133, 2550, 1462, 3129, 1465, 2459, 2410,
	1985, 1985, 3159, 2306, 2278, 3142, 3168, 2243, 1695, 1813,
	2338, 193, 2053, 1335, 3021, 3022, 2337, 1848, 1819, 1638,
	3023, 3024, 3025, 3026, 766, 3027, 3028, 3029, 3030, 3031,
	3032, 3033, 3034, 3035, 3036, 3164, 3165, 3169, 1241, 1242,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1233, 1149, 2610,
	2179, 1591, 2619, 1566, 3137, 1346, 767, 1331, 1327, 3139,
	3140, 3243, 1326, 3220, 2646, 1325, 1324, 1323, 1322, 1321,
	1320, 2477, 3792, 2645, 3190, 1319, 1318, 1127, 1123, 1124,
	1125, 1126, 1317, 2615, 1316, 2614, 2613, 2611, 2937, 3166,
	2939, 1218, 1219, 1220, 1217, 1315, 1314, 1313, 3208, 3209,
	1218, 1219, 1220, 1217, 2644, 1312, 3195, 648, 3201, 1813,
	3790, 3206, 3202, 3196, 1813, 1311, 3198, 2595, 1864, 1310,
	3219, 1309, 1308, 1869, 1307, 2123, 1218, 1219, 1220, 1217,
	1306, 1218, 1219, 1220, 1217, 1305, 3223, 1304, 3226, 3227,
	3228, 1232, 1231, 1241, 1242, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1233, 2612, 1303, 1300, 1299, 3232, 3238, 2643,
	2991, 1507, 3141, 2640, 1298, 654, 1231, 1241, 1242, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1233, 2065, 3294, 1296,
	3900, 3296, 3788, 2639, 3013, 3210, 1218, 1219, 1220, 1217,
	1218, 1219, 1220, 1217, 1920, 1921, 3258, 136, 1295, 1294,
	1291, 3222, 2638, 3256, 1284, 3262, 2603, 1283, 1281, 3275,
	1218, 1219, 1220, 1217, 3257, 1280, 3261, 1279, 1278, 1277,
	1276, 1275, 1274, 648, 1985, 1273, 3267, 3298, 1272, 1218,
	1219, 1220, 1217, 2632, 3331, 1232, 1231, 1241, 1242, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1233, 1271, 1270, 2042,
	2442, 2001, 3350, 1265, 2206, 2042, 2042, 2042, 1264, 1263,
	1218, 1219, 1220, 1217, 1262, 1182, 136, 1132, 3215, 3216,
	3786, 3401, 2310, 136, 1034, 3368, 2292, 3291, 1149, 3293,
	1170, 1034, 2622, 3287, 3898, 3856, 136, 3160, 3218, 3303,
	2598, 1149, 2616, 2617, 2717, 2470, 3306, 2096, 136, 1181,
	2894, 3369, 1149, 2891, 3415, 2895, 2890, 2889, 1498, 1218,
	1219, 1220, 1217, 1708, 3408, 3320, 2892, 1218, 1219, 1220,
	1217, 2893, 3322, 2563, 2553, 2798, 648, 120, 1985, 3352,
	64, 3359, 1149, 3361, 2896, 1496, 2434, 2435, 3437, 1391,
	1218, 1219, 1220, 1217, 3167, 63, 3438, 1876, 1877, 3105,
	3398, 3417, 3349, 3259, 3260, 2884, 3391, 1871, 1872, 1873,
	3156, 214, 3157, 3355, 2972, 2424, 2429, 2433, 2434, 2435,
	2430, 3348, 2431, 2436, 1149, 2378, 2432, 3411, 3233, 3328,
	3329, 3330, 3429, 3426, 1973, 3334, 3335, 3410, 3439, 3407,
	3405, 1551, 2548, 650, 2587, 3436, 651, 2884, 1604, 3414,
	2568, 2569, 2429, 2433, 2434, 2435, 2430, 3419, 2431, 2436,
	3421, 652, 2432, 3476, 3424, 1585, 2265, 3428, 3427, 3430,
	2810, 2055, 3484, 3431, 1176, 3079, 1149, 2811, 2812, 2813,
	3072, 2763, 2737, 2330, 3457, 3351, 3423, 2301, 1880, 1847,
	1756, 1755, 1342, 1343, 3354, 1340, 1341, 3909, 1149, 1498,
	1498, 1338, 1339, 3695, 3116, 1336, 1337, 3187, 3453, 2421,
	2416, 1986, 3482, 3483, 3454, 3521, 1457, 3521, 1456, 1209,
	3225, 3509, 2920, 3441, 2266, 2125, 1496, 1706, 1409, 1382,
	1432, 1149, 3536, 1149, 3876, 3874, 3834, 3810, 3809, 3515,
	3516, 3539, 3511, 3541, 3807, 3752, 3711, 3599, 3443, 3598,
	1498, 3537, 3449, 3276, 1659, 3489, 1659, 3500, 3252, 3251,
	3491, 3486, 3490, 3470, 3236, 2363, 2333, 3512, 648, 1606,
	1149, 1149, 3235, 2930, 1149, 1149, 1407, 1706, 3902, 3901,
	1146, 3295, 2975, 3514, 2678, 3525, 3524, 3535, 1034, 2294,
	2188, 1350, 1167, 3509, 3509, 3352, 2110, 3509, 3509, 3587,
	3544, 3582, 3901, 3518, 1882, 3902, 3596, 3572, 3573, 3566,
	3550, 3583, 3584, 3398, 3548, 3600, 3601, 3552, 3268, 3391,
	3545, 3231, 201, 3, 1424, 3270, 72, 2, 1498, 884,
	885, 886, 887, 3921, 1146, 3922, 2279, 2280, 2281, 1,
	2659, 1817, 1344, 888, 3588, 3593, 883, 1475, 2452, 3628,
	2000, 2296, 2297, 2298, 2299, 1496, 3285, 2034, 1502, 1821,
	3592, 3620, 890, 3594, 2903, 2904, 3224, 2906, 2682, 2145,
	2873, 3612, 2414, 2282, 3099, 1392, 942, 1762, 1619, 1056,
	1160, 1616, 3607, 3611, 1159, 1157, 1711, 773, 2099, 2862,
	2836, 3615, 3619, 3595, 3908, 3937, 3868, 3664, 3911, 3658,
	1636, 3533, 3534, 3462, 757, 3463, 3801, 3716, 3872, 3718,
	3610, 2150, 1214, 1149, 2952, 968, 814, 784, 1282, 1597,
	3019, 3017, 1058, 3681, 136, 3687, 783, 136, 136, 3645,
	136, 3589, 3317, 3652, 2707, 3590, 1659, 2923, 3666, 1055,
	969, 2082, 3659, 3713, 3457, 3608, 3661, 3660, 1552, 1556,
	2329, 3674, 3677, 3771, 3546, 3673, 1149, 3152, 2771, 1580,
	956, 1498, 3766, 3363, 3466, 3464, 3465, 690, 2013, 622,
	1032, 1034, 1016, 136, 3586, 2095, 691, 2309, 3825, 3509,
	3697, 1032, 922, 2291, 923, 3694, 3656, 915, 1496, 2725,
	2724, 1676, 1223, 3703, 1693, 136, 3037, 3038, 3734, 1260,
	729, 2175, 2704, 3386, 3705, 2916, 3741, 1813, 71, 70,
	69, 3729, 68, 222, 775, 221, 3629, 3504, 3797, 1504,
	3913, 1813, 1149, 755, 3432, 3712, 754, 3434, 753, 752,
	953, 954, 751, 2042, 750, 2428, 3753, 2426, 2425, 1996,
	1995, 996, 2062, 3114, 3440, 3509, 2801, 3739, 2796, 1925,
	1923, 2789, 3748, 2358, 2365, 1922, 3853, 3781, 3782, 3563,
	3744, 2846, 3747, 3456, 3770, 1870, 2354, 1942, 2817, 1149,
	3755, 1939, 1938, 2809, 3559, 3553, 1250, 1498, 1970, 3662,
	3795, 3798, 3520, 3785, 3787, 3789, 3791, 3370, 3371, 3764,
	3377, 2300, 3509, 3375, 3799, 3769, 1082, 1078, 1080, 1081,
	1079, 3778, 2608, 3204, 1496, 2335, 3784, 3074, 2274, 2273,
	3706, 2271, 2270, 1367, 3740, 3821, 3485, 2475, 2473, 1129,
	3794, 3217, 3806, 3804, 998, 1498, 3213, 997, 3664, 2107,
	2121, 2971, 3387, 1997, 1993, 2875, 2422, 3636, 1875, 3818,
	916, 2289, 41, 118, 3844, 3378, 105, 177, 56, 3833,
	3852, 176, 1496, 55, 3837, 3835, 3373, 116, 174, 54,
	100, 3395, 3396, 3838, 3839, 982, 99, 3374, 3836, 115,
	172, 53, 206, 957, 205, 208, 207, 204, 3754, 2526,
	2527, 203, 1540, 3758, 3759, 3861, 202, 3862, 3881, 3863,
	3875, 3864, 3877, 3878, 3865, 3811, 3873, 3523, 878, 3871,
	959, 44, 43, 3880, 3379, 1149, 178, 42, 3729, 106,
	57, 40, 39, 38, 3779, 34, 13, 12, 35, 22,
	21, 1623, 20, 3687, 3890, 26, 32, 31, 3888, 129,
	128, 30, 3892, 3893, 3891, 127, 126, 125, 3907, 3897,
	3915, 3899, 124, 3914, 3896, 3903, 3904, 3905, 3906, 123,
	122, 29, 19, 48, 47, 46, 9, 114, 3926, 3919,
	1149, 112, 28, 981, 979, 113, 110, 109, 108, 107,
	3927, 3770, 3928, 103, 101, 3930, 83, 82, 81, 96,
	3936, 3939, 95, 1659, 94, 978, 93, 92, 2741, 197,
	61, 188, 160, 91, 89, 90, 967, 952, 80, 3394,
	79, 2344, 78, 77, 3946, 76, 98, 189, 958, 991,
	104, 102, 3915, 3953, 181, 3914, 3952, 87, 190, 3653,
	97, 88, 3939, 3954, 86, 85, 3383, 84, 3958, 75,
	74, 73, 987, 158, 157, 156, 155, 134, 154, 152,
	153, 151, 150, 149, 148, 3883, 3884, 147, 3380, 3384,
	3382, 3381, 121, 146, 49, 50, 51, 52, 168, 193,
	167, 169, 171, 173, 170, 175, 165, 163, 988, 992,
	166, 164, 162, 66, 11, 117, 18, 25, 4, 2445,
	0, 0, 0, 0, 0, 0, 3389, 3390, 975, 0,
	973, 977, 995, 0, 0, 0, 974, 971, 970, 0,
	976, 961, 962, 960, 963, 964, 965, 966, 0, 993,
	0, 994, 702, 701, 708, 698, 0, 0, 0, 0,
	0, 0, 989, 990, 705, 706, 0, 707, 711, 0,
	0, 692, 0, 1269, 3397, 0, 142, 143, 1740, 144,
	145, 716, 0, 0, 2000, 0, 3376, 0, 0, 0,
	0, 0, 3388, 136, 0, 2921, 2922, 0, 0, 985,
	702, 701, 708, 698, 0, 984, 0, 0, 0, 0,
	0, 0, 705, 706, 0, 707, 711, 0, 0, 692,
	980, 0, 0, 0, 0, 720, 0, 0, 722, 716,
	3683, 0, 0, 721, 0, 1244, 0, 1248, 0, 0,
	0, 0, 3777, 0, 0, 0, 0, 0, 159, 187,
	195, 0, 119, 1245, 1247, 1243, 3540, 1246, 1232, 1231,
	1241, 1242, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1233,
	186, 180, 179, 720, 0, 0, 722, 67, 0, 0,
	0, 721, 0, 0, 1232, 1231, 1241, 1242, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1233, 0, 0, 983, 0,
	0, 0, 2172, 0, 955, 950, 951, 0, 0, 0,
	1232, 1231, 1241, 1242, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1233, 3393, 0, 3849, 0, 1232, 1231, 1241, 1242,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1233, 182, 183,
	184, 0, 1736, 0, 0, 0, 0, 0, 0, 1733,
	0, 0, 0, 1735, 1732, 1734, 1738, 1739, 0, 0,
	0, 1737, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 693, 695, 694, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 704, 185, 3849, 131, 0, 3392, 0,
	719, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 687, 0, 3538, 0, 0, 0, 136, 0, 693,
	695, 694, 0, 0, 0, 0, 0, 136, 0, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 0, 3108, 3849, 0, 0, 0, 719, 1971,
	0, 0, 0, 132, 1932, 697, 0, 0, 0, 3120,
	0, 0, 0, 0, 0, 0, 60, 1232, 1231, 1241,
	1242, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1233, 0,
	0, 0, 0, 0, 1973, 1941, 0, 0, 0, 0,
	0, 0, 0, 0, 1974, 1975, 0, 0, 0, 0,
	3956, 0, 0, 0, 0, 1743, 1744, 1745, 1746, 1747,
	1748, 1741, 1742, 0, 0, 62, 0, 699, 703, 709,
	1940, 710, 712, 0, 0, 713, 714, 715, 0, 0,
	717, 718, 0, 0, 0, 0, 1948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2000, 2000, 2000, 2000,
	140, 194, 0, 141, 0, 0, 0, 0, 161, 2000,
	0, 0, 0, 58, 0, 699, 703, 709, 0, 710,
	712, 0, 0, 713, 714, 715, 0, 0, 717, 718,
	0, 0, 0, 0, 0, 0, 0, 2042, 0, 0,
	702, 701, 708, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 705, 706, 1964, 707, 711, 0, 0, 692,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 1971, 133,
	45, 0, 0, 1932, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 136, 0, 137, 138, 0, 0, 139, 0, 0,
	0, 0, 0, 1973, 1941, 0, 0, 0, 0, 0,
	0, 0, 136, 1974, 1975, 0, 1931, 1933, 1930, 0,
	1927, 0, 0, 136, 0, 1952, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1958, 0, 0, 1940,
	3015, 0, 0, 0, 1943, 0, 1926, 0, 0, 0,
	0, 0, 3264, 0, 0, 1948, 1946, 1980, 0, 0,
	1947, 1949, 1951, 0, 1953, 1954, 1955, 1959, 1960, 1961,
	1963, 1966, 1967, 1968, 696, 0, 1218, 1219, 1220, 1217,
	0, 1956, 1965, 1957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1935, 1232, 1231, 1241, 1242, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1972, 0, 0, 0, 0,
	0, 0, 0, 1964, 1232, 1231, 1241, 1242, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1233, 0, 0, 0, 0,
	0, 0, 1928, 1929, 0, 0, 0, 0, 0, 693,
	695, 694, 0, 0, 0, 1740, 0, 0, 0, 700,
	1969, 0, 0, 0, 0, 0, 0, 0, 2042, 0,
	0, 704, 0, 0, 0, 0, 0, 1945, 719, 0,
	0, 0, 0, 0, 1944, 697, 0, 0, 0, 0,
	0, 1032, 0, 136, 0, 1931, 2766, 1930, 136, 2765,
	0, 0, 0, 0, 1952, 2000, 0, 0, 1962, 0,
	0, 0, 0, 0, 0, 1958, 0, 1950, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	1977, 1976, 0, 0, 0, 1946, 1980, 0, 0, 1947,
	1949, 1951, 0, 1953, 1954, 1955, 1959, 1960, 1961, 1963,
	1966, 1967, 1968, 0, 0, 0, 0, 0, 0, 0,
	1956, 1965, 1957, 0, 0, 0, 0, 0, 0, 1101,
	0, 2042, 1935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1972, 699, 703, 709, 0, 710,
	712, 0, 0, 713, 714, 715, 0, 0, 717, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1736,
	0, 1928, 1929, 0, 0, 1979, 1733, 0, 1978, 0,
	1735, 1732, 1734, 1738, 1739, 0, 0, 0, 1737, 1969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1945, 0, 0, 0,
	0, 0, 0, 1944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1962, 0, 0,
	0, 1086, 0, 0, 0, 0, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1977,
	1976, 1109, 1113, 1115, 1117, 1119, 1120, 1122, 0, 1127,
	1123, 1124, 1125, 1126, 0, 1104, 1105, 1106, 1107, 1084,
	1085, 1110, 0, 1087, 0, 1089, 1090, 1091, 1092, 1088,
	1093, 1094, 1095, 1096, 1097, 1100, 1102, 1098, 1099, 1108,
	0, 0, 0, 0, 0, 0, 0, 1112, 1114, 1116,
	1118, 1121, 1937, 3571, 696, 0, 0, 0, 0, 0,
	0, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1743, 1744, 1745, 1746, 1747, 1748, 1741, 1742,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 1979, 0, 0, 1978, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 791, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 2000, 0, 744, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 782, 550,
	501, 418, 371, 568, 567, 0, 0, 849, 857, 0,
	0, 0, 0, 0, 2604, 2605, 0, 0, 0, 0,
	736, 0, 0, 772, 826, 825, 759, 769, 0, 0,
	300, 220, 496, 616, 498, 497, 760, 0, 761, 765,
	768, 764, 762, 763, 0, 841, 0, 0, 0, 0,
	0, 0, 728, 740, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	738, 136, 0, 0, 0, 792, 0, 739, 0, 0,
	787, 766, 770, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 767, 790, 794, 321, 863, 788, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 864, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 1111, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 785, 136, 613, 0,
	452, 0, 0, 847, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 789, 0, 407, 389, 860, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	1764, 1763, 1765, 464, 355, 356, 0, 334, 282, 283,
	631, 845, 385, 578, 611, 612, 503, 0, 859, 840,
	842, 843, 846, 850, 851, 852, 853, 854, 856, 858,
	862, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 861, 538, 515, 541, 456, 518, 517, 0,
	136, 552, 793, 553, 554, 375, 376, 377, 378, 848,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 870, 844,
	869, 871, 872, 868, 873, 874, 855, 749, 0, 800,
	866, 865, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 833, 807, 808, 809,
	746, 810, 804, 805, 747, 806, 834, 798, 830, 831,
	774, 801, 811, 829, 812, 832, 835, 836, 875, 876,
	818, 802, 248, 877, 815, 837, 828, 827, 813, 799,
	838, 839, 781, 776, 816, 817, 803, 821, 822, 823,
	748, 795, 796, 797, 819, 820, 777, 778, 779, 780,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 824, 621, 422, 0,
	0, 409, 427, 416, 791, 632, 499, 500, 633, 610,
	0, 741, 0, 387, 0, 514, 547, 536, 620, 502,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	327, 1814, 0, 357, 551, 533, 543, 534, 519, 520,
	521, 528, 337, 522, 523, 524, 494, 525, 495, 526,
	527, 782, 550, 501, 418, 371, 568, 567, 0, 0,
	849, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	2025, 0, 0, 736, 0, 0, 772, 826, 825, 759,
	769, 0, 0, 300, 220, 496, 616, 498, 497, 760,
	0, 761, 765, 768, 764, 762, 763, 0, 841, 0,
	0, 0, 0, 0, 0, 728, 740, 0, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 737, 738, 0, 0, 0, 0, 792, 0,
	739, 0, 0, 2026, 766, 770, 0, 0, 0, 0,
	290, 424, 442, 301, 413, 455, 306, 421, 296, 386,
	410, 0, 0, 292, 440, 420, 368, 347, 348, 291,
	0, 404, 325, 339, 322, 384, 767, 790, 794, 321,
	863, 788, 450, 294, 0, 449, 383, 436, 441, 369,
	363, 0, 293, 438, 367, 362, 351, 329, 864, 352,
	353, 343, 395, 361, 396, 344, 373, 372, 374, 0,
	0, 0, 0, 0, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 609, 785,
	0, 613, 0, 452, 0, 0, 847, 0, 0, 0,
	423, 0, 0, 354, 0, 0, 0, 789, 0, 407,
	389, 860, 0, 0, 405, 359, 437, 397, 443, 425,
	451, 401, 398, 285, 426, 324, 370, 297, 299, 319,
	326, 328, 330, 331, 379, 380, 392, 412, 428, 429,
	430, 323, 307, 406, 308, 341, 309, 286, 315, 313,
	316, 414, 317, 288, 393, 434, 0, 336, 402, 366,
	289, 365, 394, 433, 432, 298, 459, 465, 466, 555,
	0, 471, 636, 637, 638, 480, 485, 486, 487, 489,
	490, 491, 492, 556, 573, 540, 510, 473, 564, 507,
	511, 512, 576, 0, 0, 0, 464, 355, 356, 0,
	334, 282, 283, 631, 845, 385, 578, 611, 612, 503,
	0, 859, 840, 842, 843, 846, 850, 851, 852, 853,
	854, 856, 858, 862, 630, 0, 557, 572, 634, 571,
	627, 391, 0, 411, 569, 516, 0, 561, 535, 0,
	562, 531, 566, 0, 505, 0, 419, 445, 457, 474,
	477, 506, 591, 592, 593, 287, 476, 595, 596, 597,
	598, 599, 600, 601, 594, 861, 538, 515, 541, 456,
	518, 517, 0, 0, 552, 793, 553, 554, 375, 376,
	377, 378, 848, 579, 305, 475, 400, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 545, 542,
	639, 0, 602, 603, 0, 0, 469, 470, 333, 340,
	488, 342, 304, 390, 335, 454, 349, 0, 481, 546,
	482, 605, 608, 606, 607, 382, 345, 346, 415, 350,
	360, 403, 453, 388, 408, 302, 444, 417, 364, 532,
	559, 870, 844, 869, 871, 872, 868, 873, 874, 855,
	749, 0, 800, 866, 865, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 587, 586, 585,
	584, 583, 582, 581, 580, 0, 0, 529, 431, 314,
	276, 310, 311, 318, 628, 625, 435, 629, 0, 284,
	509, 358, 0, 399, 332, 574, 575, 0, 0, 833,
	807, 808, 809, 746, 810, 804, 805, 747, 806, 834,
	798, 830, 831, 774, 801, 811, 829, 812, 832, 835,
	836, 875, 876, 818, 802, 248, 877, 815, 837, 828,
	827, 813, 799, 838, 839, 781, 776, 816, 817, 803,
	821, 822, 823, 748, 795, 796, 797, 819, 820, 777,
	778, 779, 780, 0, 0, 0, 460, 461, 462, 484,
	0, 446, 508, 626, 0, 0, 0, 0, 0, 0,
	0, 558, 570, 604, 0, 614, 615, 617, 619, 824,
	621, 422, 0, 0, 409, 427, 416, 0, 632, 499,
	500, 633, 610, 0, 741, 197, 791, 0, 0, 0,
	0, 0, 0, 0, 0, 387, 0, 514, 547, 536,
	620, 502, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 327, 0, 0, 357, 551, 533, 543, 534,
	519, 520, 521, 528, 337, 522, 523, 524, 494, 525,
	495, 526, 527, 1253, 550, 501, 418, 371, 568, 567,
	0, 0, 849, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 300, 220, 496, 616, 498,
	497, 760, 0, 761, 765, 768, 764, 762, 763, 0,
	841, 0, 0, 0, 0, 0, 0, 728, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 290, 424, 442, 301, 413, 455, 306, 421,
	296, 386, 410, 0, 0, 292, 440, 420, 368, 347,
	348, 291, 0, 404, 325, 339, 322, 384, 767, 790,
	794, 321, 863, 788, 450, 294, 0, 449, 383, 436,
	441, 369, 363, 0, 293, 438, 367, 362, 351, 329,
	864, 352, 353, 343, 395, 361, 396, 344, 373, 372,
	374, 0, 0, 0, 0, 0, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	609, 785, 0, 613, 0, 452, 0, 0, 847, 0,
	0, 0, 423, 0, 0, 354, 0, 0, 0, 789,
	0, 407, 389, 860, 0, 0, 405, 359, 437, 397,
	443, 425, 451, 401, 398, 285, 426, 324, 370, 297,
	299, 319, 326, 328, 330, 331, 379, 380, 392, 412,
	428, 429, 430, 323, 307, 406, 308, 341, 309, 286,
	315, 313, 316, 414, 317, 288, 393, 434, 0, 336,
	402, 366, 289, 365, 394, 433, 432, 298, 459, 465,
	466, 555, 0, 471, 636, 637, 638, 480, 485, 486,
	487, 489, 490, 491, 492, 556, 573, 540, 510, 473,
	564, 507, 511, 512, 576, 0, 0, 0, 464, 355,
	356, 0, 334, 282, 283, 631, 845, 385, 578, 611,
	612, 503, 0, 859, 840, 842, 843, 846, 850, 851,
	852, 853, 854, 856, 858, 862, 630, 0, 557, 572,
	634, 571, 627, 391, 0, 411, 569, 516, 0, 561,
	535, 0, 562, 531, 566, 0, 505, 0, 419, 445,
	457, 474, 477, 506, 591, 592, 593, 287, 476, 595,
	596, 597, 598, 599, 600, 601, 594, 861, 538, 515,
	541, 456, 518, 517, 0, 0, 552, 793, 553, 554,
	375, 376, 377, 378, 848, 579, 305, 475, 400, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	545, 542, 639, 0, 602, 603, 0, 0, 469, 470,
	333, 340, 488, 342, 304, 390, 335, 454, 349, 0,
	481, 546, 482, 605, 608, 606, 607, 382, 345, 346,
	415, 350, 360, 403, 453, 388, 408, 302, 444, 417,
	364, 532, 559, 870, 844, 869, 871, 872, 868, 873,
	874, 855, 749, 0, 800, 866, 865, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	586, 585, 584, 583, 582, 581, 580, 0, 0, 529,
	431, 314, 276, 310, 311, 318, 628, 625, 435, 629,
	0, 284, 509, 358, 161, 399, 332, 574, 575, 0,
	0, 833, 807, 808, 809, 746, 810, 804, 805, 747,
	806, 834, 798, 830, 831, 774, 801, 811, 829, 812,
	832, 835, 836, 875, 876, 818, 802, 248, 877, 815,
	837, 828, 827, 813, 799, 838, 839, 781, 776, 816,
	817, 803, 821, 822, 823, 748, 795, 796, 797, 819,
	820, 777, 778, 779, 780, 0, 0, 0, 460, 461,
	462, 484, 0, 446, 508, 626, 0, 0, 0, 0,
	0, 0, 0, 558, 570, 604, 0, 614, 615, 617,
	619, 824, 621, 422, 0, 0, 409, 427, 416, 791,
	632, 499, 500, 633, 610, 0, 741, 0, 387, 0,
	514, 547, 536, 620, 502, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 327, 3955, 0, 357, 551,
	533, 543, 534, 519, 520, 521, 528, 337, 522, 523,
	524, 494, 525, 495, 526, 527, 782, 550, 501, 418,
	371, 568, 567, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 772, 826, 825, 759, 769, 0, 0, 300, 220,
	496, 616, 498, 497, 760, 0, 761, 765, 768, 764,
	762, 763, 0, 841, 0, 0, 0, 0, 0, 0,
	728, 740, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 737, 738, 0,
	0, 0, 0, 792, 0, 739, 0, 0, 787, 766,
	770, 0, 0, 0, 0, 290, 424, 442, 301, 413,
	455, 306, 421, 296, 386, 410, 0, 0, 292, 440,
	420, 368, 347, 348, 291, 0, 404, 325, 339, 322,
	384, 767, 790, 794, 321, 863, 788, 450, 294, 0,
	449, 383, 436, 441, 369, 363, 0, 293, 438, 367,
	362, 351, 329, 864, 352, 353, 343, 395, 361, 396,
	344, 373, 372, 374, 0, 0, 0, 0, 0, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 785, 0, 613, 0, 452, 0,
	0, 847, 0, 0, 0, 423, 0, 0, 354, 0,
	0, 0, 789, 0, 407, 389, 860, 0, 0, 405,
	359, 437, 397, 443, 425, 451, 401, 398, 285, 426,
	324, 370, 297, 299, 319, 326, 328, 330, 331, 379,
	380, 392, 412, 428, 429, 430, 323, 307, 406, 308,
	341, 309, 286, 315, 313, 316, 414, 317, 288, 393,
	434, 0, 336, 402, 366, 289, 365, 394, 433, 432,
	298, 459, 465, 466, 555, 0, 471, 636, 637, 638,
	480, 485, 486, 487, 489, 490, 491, 492, 556, 573,
	540, 510, 473, 564, 507, 511, 512, 576, 0, 0,
	0, 464, 355, 356, 0, 334, 282, 283, 631, 845,
	385, 578, 611, 612, 503, 0, 859, 840, 842, 843,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 630,
	0, 557, 572, 634, 571, 627, 391, 0, 411, 569,
	516, 0, 561, 535, 0, 562, 531, 566, 0, 505,
	0, 419, 445, 457, 474, 477, 506, 591, 592, 593,
	287, 476, 595, 596, 597, 598, 599, 600, 601, 594,
	861, 538, 515, 541, 456, 518, 517, 0, 0, 552,
	793, 553, 554, 375, 376, 377, 378, 848, 579, 305,
	475, 400, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 545, 542, 639, 0, 602, 603, 0,
	0, 469, 470, 333, 340, 488, 342, 304, 390, 335,
	454, 349, 0, 481, 546, 482, 605, 608, 606, 607,
	382, 345, 346, 415, 350, 360, 403, 453, 388, 408,
	302, 444, 417, 364, 532, 559, 870, 844, 869, 871,
	872, 868, 873, 874, 855, 749, 0, 800, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 586, 585, 584, 583, 582, 581, 580,
	0, 0, 529, 431, 314, 276, 310, 311, 318, 628,
	625, 435, 629, 0, 284, 509, 358, 0, 399, 332,
	574, 575, 0, 0, 833, 807, 808, 809, 746, 810,
	804, 805, 747, 806, 834, 798, 830, 831, 774, 801,
	811, 829, 812, 832, 835, 836, 875, 876, 818, 802,
	248, 877, 815, 837, 828, 827, 813, 799, 838, 839,
	781, 776, 816, 817, 803, 821, 822, 823, 748, 795,
	796, 797, 819, 820, 777, 778, 779, 780, 0, 0,
	0, 460, 461, 462, 484, 0, 446, 508, 626, 0,
	0, 0, 0, 0, 0, 0, 558, 570, 604, 0,
	614, 615, 617, 619, 824, 621, 422, 0, 0, 409,
	427, 416, 791, 632, 499, 500, 633, 610, 0, 741,
	0, 387, 0, 514, 547, 536, 620, 502, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 327, 0,
	0, 357, 551, 533, 543, 534, 519, 520, 521, 528,
	337, 522, 523, 524, 494, 525, 495, 526, 527, 782,
	550, 501, 418, 371, 568, 567, 0, 0, 849, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 772, 826, 825, 759, 769, 0,
	0, 300, 220, 496, 616, 498, 497, 760, 0, 761,
	765, 768, 764, 762, 763, 0, 841, 0, 0, 0,
	0, 0, 0, 728, 740, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 738, 0, 0, 0, 0, 792, 0, 739, 0,
	0, 787, 766, 770, 0, 0, 0, 0, 290, 424,
	442, 301, 413, 455, 306, 421, 296, 386, 410, 0,
	0, 292, 440, 420, 368, 347, 348, 291, 0, 404,
	325, 339, 322, 384, 767, 790, 794, 321, 863, 788,
	450, 294, 0, 449, 383, 436, 441, 369, 363, 0,
	293, 438, 367, 362, 351, 329, 864, 352, 353, 343,
	395, 361, 396, 344, 373, 372, 374, 0, 0, 0,
	0, 0, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 785, 0, 613,
	0, 452, 0, 0, 847, 0, 0, 0, 423, 0,
	0, 354, 0, 0, 0, 789, 0, 407, 389, 860,
	3850, 0, 405, 359, 437, 397, 443, 425, 451, 401,
	398, 285, 426, 324, 370, 297, 299, 319, 326, 328,
	330, 331, 379, 380, 392, 412, 428, 429, 430, 323,
	307, 406, 308, 341, 309, 286, 315, 313, 316, 414,
	317, 288, 393, 434, 0, 336, 402, 366, 289, 365,
	394, 433, 432, 298, 459, 465, 466, 555, 0, 471,
	636, 637, 638, 480, 485, 486, 487, 489, 490, 491,
	492, 556, 573, 540, 510, 473, 564, 507, 511, 512,
	576, 0, 0, 0, 464, 355, 356, 0, 334, 282,
	283, 631, 845, 385, 578, 611, 612, 503, 0, 859,
	840, 842, 843, 846, 850, 851, 852, 853, 854, 856,
	858, 862, 630, 0, 557, 572, 634, 571, 627, 391,
	0, 411, 569, 516, 0, 561, 535, 0, 562, 531,
	566, 0, 505, 0, 419, 445, 457, 474, 477, 506,
	591, 592, 593, 287, 476, 595, 596, 597, 598, 599,
	600, 601, 594, 861, 538, 515, 541, 456, 518, 517,
	0, 0, 552, 793, 553, 554, 375, 376, 377, 378,
	848, 579, 305, 475, 400, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 544, 545, 542, 639, 0,
	602, 603, 0, 0, 469, 470, 333, 340, 488, 342,
	304, 390, 335, 454, 349, 0, 481, 546, 482, 605,
	608, 606, 607, 382, 345, 346, 415, 350, 360, 403,
	453, 388, 408, 302, 444, 417, 364, 532, 559, 870,
	844, 869, 871, 872, 868, 873, 874, 855, 749, 0,
	800, 866, 865, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 586, 585, 584, 583,
	582, 581, 580, 0, 0, 529, 431, 314, 276, 310,
	311, 318, 628, 625, 435, 629, 0, 284, 509, 358,
	0, 399, 332, 574, 575, 0, 0, 833, 807, 808,
	809, 746, 810, 804, 805, 747, 806, 834, 798, 830,
	831, 774, 801, 811, 829, 812, 832, 835, 836, 875,
	876, 818, 802, 248, 877, 815, 837, 828, 827, 813,
	799, 838, 839, 781, 776, 816, 817, 803, 821, 822,
	823, 748, 795, 796, 797, 819, 820, 777, 778, 779,
	780, 0, 0, 0, 460, 461, 462, 484, 0, 446,
	508, 626, 0, 0, 0, 0, 0, 0, 0, 558,
	570, 604, 0, 614, 615, 617, 619, 824, 621, 422,
	0, 0, 409, 427, 416, 791, 632, 499, 500, 633,
	610, 0, 741, 0, 387, 0, 514, 547, 536, 620,
	502, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 327, 1814, 0, 357, 551, 533, 543, 534, 519,
	520, 521, 528, 337, 522, 523, 524, 494, 525, 495,
	526, 527, 782, 550, 501, 418, 371, 568, 567, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 772, 826, 825,
	759, 769, 0, 0, 300, 220, 496, 616, 498, 497,
	760, 0, 761, 765, 768, 764, 762, 763, 0, 841,
	0, 0, 0, 0, 0, 0, 728, 740, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 738, 0, 0, 0, 0, 792,
	0, 739, 0, 0, 787, 766, 770, 0, 0, 0,
	0, 290, 424, 442, 301, 413, 455, 306, 421, 296,
	386, 410, 0, 0, 292, 440, 420, 368, 347, 348,
	291, 0, 404, 325, 339, 322, 384, 767, 790, 794,
	321, 863, 788, 450, 294, 0, 449, 383, 436, 441,
	369, 363, 0, 293, 438, 367, 362, 351, 329, 864,
	352, 353, 343, 395, 361, 396, 344, 373, 372, 374,
	0, 0, 0, 0, 0, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 609,
	785, 0, 613, 0, 452, 0, 0, 847, 0, 0,
	0, 423, 0, 0, 354, 0, 0, 0, 789, 0,
	407, 389, 860, 0, 0, 405, 359, 437, 397, 443,
	425, 451, 401, 398, 285, 426, 324, 370, 297, 299,
	319, 326, 328, 330, 331, 379, 380, 392, 412, 428,
	429, 430, 323, 307, 406, 308, 341, 309, 286, 315,
	313, 316, 414, 317, 288, 393, 434, 0, 336, 402,
	366, 289, 365, 394, 433, 432, 298, 459, 465, 466,
	555, 0, 471, 636, 637, 638, 480, 485, 486, 487,
	489, 490, 491, 492, 556, 573, 540, 510, 473, 564,
	507, 511, 512, 576, 0, 0, 0, 464, 355, 356,
	0, 334, 282, 283, 631, 845, 385, 578, 611, 612,
	503, 0, 859, 840, 842, 843, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 630, 0, 557, 572, 634,
	571, 627, 391, 0, 411, 569, 516, 0, 561, 535,
	0, 562, 531, 566, 0, 505, 0, 419, 445, 457,
	474, 477, 506, 591, 592, 593, 287, 476, 595, 596,
	597, 598, 599, 600, 601, 594, 861, 538, 515, 541,
	456, 518, 517, 0, 0, 552, 793, 553, 554, 375,
	376, 377, 378, 848, 579, 305, 475, 400, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 545,
	542, 639, 0, 602, 603, 0, 0, 469, 470, 333,
	340, 488, 342, 304, 390, 335, 454, 349, 0, 481,
	546, 482, 605, 608, 606, 607, 382, 345, 346, 415,
	350, 360, 403, 453, 388, 408, 302, 444, 417, 364,
	532, 559, 870, 844, 869, 871, 872, 868, 873, 874,
	855, 749, 0, 800, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 586,
	585, 584, 583, 582, 581, 580, 0, 0, 529, 431,
	314, 276, 310, 311, 318, 628, 625, 435, 629, 0,
	284, 509, 358, 0, 399, 332, 574, 575, 0, 0,
	833, 807, 808, 809, 746, 810, 804, 805, 747, 806,
	834, 798, 830, 831, 774, 801, 811, 829, 812, 832,
	835, 836, 875, 876, 818, 802, 248, 877, 815, 837,
	828, 827, 813, 799, 838, 839, 781, 776, 816, 817,
	803, 821, 822, 823, 748, 795, 796, 797, 819, 820,
	777, 778, 779, 780, 0, 0, 0, 460, 461, 462,
	484, 0, 446, 508, 626, 0, 0, 0, 0, 0,
	0, 0, 558, 570, 604, 0, 614, 615, 617, 619,
	824, 621, 422, 0, 0, 409, 427, 416, 791, 632,
	499, 500, 633, 610, 0, 741, 0, 387, 0, 514,
	547, 536, 620, 502, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 327, 0, 0, 357, 551, 533,
	543, 534, 519, 520, 521, 528, 337, 522, 523, 524,
	494, 525, 495, 526, 527, 782, 550, 501, 418, 371,
	568, 567, 0, 0, 849, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	772, 826, 825, 759, 769, 0, 0, 300, 220, 496,
	616, 498, 497, 760, 0, 761, 765, 768, 764, 762,
	763, 0, 841, 0, 0, 0, 0, 0, 0, 728,
	740, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 738, 1535, 0,
	0, 0, 792, 0, 739, 0, 0, 787, 766, 770,
	0, 0, 0, 0, 290, 424, 442, 301, 413, 455,
	306, 421, 296, 386, 410, 0, 0, 292, 440, 420,
	368, 347, 348, 291, 0, 404, 325, 339, 322, 384,
	767, 790, 794, 321, 863, 788, 450, 294, 0, 449,
	383, 436, 441, 369, 363, 0, 293, 438, 367, 362,
	351, 329, 864, 352, 353, 343, 395, 361, 396, 344,
	373, 372, 374, 0, 0, 0, 0, 0, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 785, 0, 613, 0, 452, 0, 0,
	847, 0, 0, 0, 423, 0, 0, 354, 0, 0,
	0, 789, 0, 407, 389, 860, 0, 0, 405, 359,
	437, 397, 443, 425, 451, 401, 398, 285, 426, 324,
	370, 297, 299, 319, 326, 328, 330, 331, 379, 380,
	392, 412, 428, 429, 430, 323, 307, 406, 308, 341,
	309, 286, 315, 313, 316, 414, 317, 288, 393, 434,
	0, 336, 402, 366, 289, 365, 394, 433, 432, 298,
	459, 465, 466, 555, 0, 471, 636, 637, 638, 480,
	485, 486, 487, 489, 490, 491, 492, 556, 573, 540,
	510, 473, 564, 507, 511, 512, 576, 0, 0, 0,
	464, 355, 356, 0, 334, 282, 283, 631, 845, 385,
	578, 611, 612, 503, 0, 859, 840, 842, 843, 846,
	850, 851, 852, 853, 854, 856, 858, 862, 630, 0,
	557, 572, 634, 571, 627, 391, 0, 411, 569, 516,
	0, 561, 535, 0, 562, 531, 566, 0, 505, 0,
	419, 445, 457, 474, 477, 506, 591, 592, 593, 287,
	476, 595, 596, 597, 598, 599, 600, 601, 594, 861,
	538, 515, 541, 456, 518, 517, 0, 0, 552, 793,
	553, 554, 375, 376, 377, 378, 848, 579, 305, 475,
	400, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 545, 542, 639, 0, 602, 603, 0, 0,
	469, 470, 333, 340, 488, 342, 304, 390, 335, 454,
	349, 0, 481, 546, 482, 605, 608, 606, 607, 382,
	345, 346, 415, 350, 360, 403, 453, 388, 408, 302,
	444, 417, 364, 532, 559, 870, 844, 869, 871, 872,
	868, 873, 874, 855, 749, 0, 800, 866, 865, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 587, 586, 585, 584, 583, 582, 581, 580, 0,
	0, 529, 431, 314, 276, 310, 311, 318, 628, 625,
	435, 629, 0, 284, 509, 358, 0, 399, 332, 574,
	575, 0, 0, 833, 807, 808, 809, 746, 810, 804,
	805, 747, 806, 834, 798, 830, 831, 774, 801, 811,
	829, 812, 832, 835, 836, 875, 876, 818, 802, 248,
	877, 815, 837, 828, 827, 813, 799, 838, 839, 781,
	776, 816, 817, 803, 821, 822, 823, 748, 795, 796,
	797, 819, 820, 777, 778, 779, 780, 0, 0, 0,
	460, 461, 462, 484, 0, 446, 508, 626, 0, 0,
	0, 0, 0, 0, 0, 558, 570, 604, 0, 614,
	615, 617, 619, 824, 621, 422, 0, 0, 409, 427,
	416, 0, 632, 499, 500, 633, 610, 791, 741, 0,
	2196, 0, 0, 0, 0, 0, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 782, 550, 501, 418, 371, 568,
	567, 0, 0, 849, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 772,
	826, 825, 759, 769, 0, 0, 300, 220, 496, 616,
	498, 497, 760, 0, 761, 765, 768, 764, 762, 763,
	0, 841, 0, 0, 0, 0, 0, 0, 728, 740,
	0, 745, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 737, 738, 0, 0, 0,
	0, 792, 0, 739, 0, 0, 787, 766, 770, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 767,
	790, 794, 321, 863, 788, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 864, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 785, 0, 613, 0, 452, 0, 0, 847,
	0, 0, 0, 423, 0, 0, 354, 0, 0, 0,
	789, 0, 407, 389, 860, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 845, 385, 578,
	611, 612, 503, 0, 859, 840, 842, 843, 846, 850,
	851, 852, 853, 854, 856, 858, 862, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 861, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 793, 553,
	554, 375, 376, 377, 378, 848, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 870, 844, 869, 871, 872, 868,
	873, 874, 855, 749, 0, 800, 866, 865, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 833, 807, 808, 809, 746, 810, 804, 805,
	747, 806, 834, 798, 830, 831, 774, 801, 811, 829,
	812, 832, 835, 836, 875, 876, 818, 802, 248, 877,
	815, 837, 828, 827, 813, 799, 838, 839, 781, 776,
	816, 817, 803, 821, 822, 823, 748, 795, 796, 797,
	819, 820, 777, 778, 779, 780, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 824, 621, 422, 0, 0, 409, 427, 416,
	791, 632, 499, 500, 633, 610, 0, 741, 0, 387,
	0, 514, 547, 536, 620, 502, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 327, 0, 0, 357,
	551, 533, 543, 534, 519, 520, 521, 528, 337, 522,
	523, 524, 494, 525, 495, 526, 527, 782, 550, 501,
	418, 371, 568, 567, 0, 0, 849, 857, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 772, 826, 825, 759, 769, 0, 0, 300,
	220, 496, 616, 498, 497, 760, 0, 761, 765, 768,
	764, 762, 763, 0, 841, 0, 0, 0, 0, 0,
	0, 728, 740, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 738,
	1807, 0, 0, 0, 792, 0, 739, 0, 0, 787,
	766, 770, 0, 0, 0, 0, 290, 424, 442, 301,
	413, 455, 306, 421, 296, 386, 410, 0, 0, 292,
	440, 420, 368, 347, 348, 291, 0, 404, 325, 339,
	322, 384, 767, 790, 794, 321, 863, 788, 450, 294,
	0, 449, 383, 436, 441, 369, 363, 0, 293, 438,
	367, 362, 351, 329, 864, 352, 353, 343, 395, 361,
	396, 344, 373, 372, 374, 0, 0, 0, 0, 0,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 609, 785, 0, 613, 0, 452,
	0, 0, 847, 0, 0, 0, 423, 0, 0, 354,
	0, 0, 0, 789, 0, 407, 389, 860, 0, 0,
	405, 359, 437, 397, 443, 425, 451, 401, 398, 285,
	426, 324, 370, 297, 299, 319, 326, 328, 330, 331,
	379, 380, 392, 412, 428, 429, 430, 323, 307, 406,
	308, 341, 309, 286, 315, 313, 316, 414, 317, 288,
	393, 434, 0, 336, 402, 366, 289, 365, 394, 433,
	432, 298, 459, 465, 466, 555, 0, 471, 636, 637,
	638, 480, 485, 486, 487, 489, 490, 491, 492, 556,
	573, 540, 510, 473, 564, 507, 511, 512, 576, 0,
	0, 0, 464, 355, 356, 0, 334, 282, 283, 631,
	845, 385, 578, 611, 612, 503, 0, 859, 840, 842,
	843, 846, 850, 851, 852, 853, 854, 856, 858, 862,
	630, 0, 557, 572, 634, 571, 627, 391, 0, 411,
	569, 516, 0, 561, 535, 0, 562, 531, 566, 0,
	505, 0, 419, 445, 457, 474, 477, 506, 591, 592,
	593, 287, 476, 595, 596, 597, 598, 599, 600, 601,
	594, 861, 538, 515, 541, 456, 518, 517, 0, 0,
	552, 793, 553, 554, 375, 376, 377, 378, 848, 579,
	305, 475, 400, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 545, 542, 639, 0, 602, 603,
	0, 0, 469, 470, 333, 340, 488, 342, 304, 390,
	335, 454, 349, 0, 481, 546, 482, 605, 608, 606,
	607, 382, 345, 346, 415, 350, 360, 403, 453, 388,
	408, 302, 444, 417, 364, 532, 559, 870, 844, 869,
	871, 872, 868, 873, 874, 855, 749, 0, 800, 866,
	865, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 586, 585, 584, 583, 582, 581,
	580, 0, 0, 529, 431, 314, 276, 310, 311, 318,
	628, 625, 435, 629, 0, 284, 509, 358, 0, 399,
	332, 574, 575, 0, 0, 833, 807, 808, 809, 746,
	810, 804, 805, 747, 806, 834, 798, 830, 831, 774,
	801, 811, 829, 812, 832, 835, 836, 875, 876, 818,
	802, 248, 877, 815, 837, 828, 827, 813, 799, 838,
	839, 781, 776, 816, 817, 803, 821, 822, 823, 748,
	795, 796, 797, 819, 820, 777, 778, 779, 780, 0,
	0, 0, 460, 461, 462, 484, 0, 446, 508, 626,
	0, 0, 0, 0, 0, 0, 0, 558, 570, 604,
	0, 614, 615, 617, 619, 824, 621, 422, 0, 0,
	409, 427, 416, 791, 632, 499, 500, 633, 610, 0,
	741, 0, 387, 0, 514, 547, 536, 620, 502, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 327,
	0, 0, 357, 551, 533, 543, 534, 519, 520, 521,
	528, 337, 522, 523, 524, 494, 525, 495, 526, 527,
	782, 550, 501, 418, 371, 568, 567, 0, 0, 849,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 0, 0, 772, 826, 825, 759, 769,
	0, 0, 300, 220, 496, 616, 498, 497, 760, 0,
	761, 765, 768, 764, 762, 763, 0, 841, 0, 0,
	0, 0, 0, 0, 728, 740, 0, 745, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 737, 738, 0, 0, 0, 0, 792, 0, 739,
	0, 0, 787, 766, 770, 0, 0, 0, 0, 290,
	424, 442, 301, 413, 455, 306, 421, 296, 386, 410,
	0, 0, 292, 440, 420, 368, 347, 348, 291, 0,
	404, 325, 339, 322, 384, 767, 790, 794, 321, 863,
	788, 450, 294, 0, 449, 383, 436, 441, 369, 363,
	0, 293, 438, 367, 362, 351, 329, 864, 352, 353,
	343, 395, 361, 396, 344, 373, 372, 374, 0, 0,
	0, 0, 0, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 785, 0,
	613, 0, 452, 0, 0, 847, 0, 0, 0, 423,
	0, 0, 354, 0, 0, 0, 789, 0, 407, 389,
	860, 0, 0, 405, 359, 437, 397, 443, 425, 451,
	401, 398, 285, 426, 324, 370, 297, 299, 319, 326,
	328, 330, 331, 379, 380, 392, 412, 428, 429, 430,
	323, 307, 406, 308, 341, 309, 286, 315, 313, 316,
	414, 317, 288, 393, 434, 0, 336, 402, 366, 289,
	365, 394, 433, 432, 298, 459, 465, 466, 555, 0,
	471, 636, 637, 638, 480, 485, 486, 487, 489, 490,
	491, 492, 556, 573, 540, 510, 473, 564, 507, 511,
	512, 576, 0, 0, 0, 464, 355, 356, 0, 334,
	282, 283, 631, 845, 385, 578, 611, 612, 503, 0,
	859, 840, 842, 843, 846, 850, 851, 852, 853, 854,
	856, 858, 862, 630, 0, 557, 572, 634, 571, 627,
	391, 0, 411, 569, 516, 0, 561, 535, 0, 562,
	531, 566, 0, 505, 0, 419, 445, 457, 474, 477,
	506, 591, 592, 593, 287, 476, 595, 596, 597, 598,
	599, 600, 601, 594, 861, 538, 515, 541, 456, 518,
	517, 0, 0, 552, 793, 553, 554, 375, 376, 377,
	378, 848, 579, 305, 475, 400, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 544, 545, 542, 639,
	0, 602, 603, 0, 0, 469, 470, 333, 340, 488,
	342, 304, 390, 335, 454, 349, 0, 481, 546, 482,
	605, 608, 606, 607, 382, 345, 346, 415, 350, 360,
	403, 453, 388, 408, 302, 444, 417, 364, 532, 559,
	870, 844, 869, 871, 872, 868, 873, 874, 855, 749,
	0, 800, 866, 865, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 587, 586, 585, 584,
	583, 582, 581, 580, 0, 0, 529, 431, 314, 276,
	310, 311, 318, 628, 625, 435, 629, 0, 284, 509,
	358, 0, 399, 332, 574, 575, 0, 0, 833, 807,
	808, 809, 746, 810, 804, 805, 747, 806, 834, 798,
	830, 831, 774, 801, 811, 829, 812, 832, 835, 836,
	875, 876, 818, 802, 248, 877, 815, 837, 828, 827,
	813, 799, 838, 839, 781, 776, 816, 817, 803, 821,
	822, 823, 748, 795, 796, 797, 819, 820, 777, 778,
	779, 780, 0, 0, 0, 460, 461, 462, 484, 0,
	446, 508, 626, 0, 0, 0, 0, 0, 0, 0,
	558, 570, 604, 0, 614, 615, 617, 619, 824, 621,
	422, 0, 0, 409, 427, 416, 791, 632, 499, 500,
	633, 610, 0, 741, 0, 387, 0, 514, 547, 536,
	620, 502, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 327, 0, 0, 357, 551, 533, 543, 534,
	519, 520, 521, 528, 337, 522, 523, 524, 494, 525,
	495, 526, 527, 782, 550, 501, 418, 371, 568, 567,
	0, 0, 849, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 772, 826,
	825, 759, 769, 0, 0, 300, 220, 496, 616, 498,
	497, 2656, 0, 2657, 765, 768, 764, 762, 763, 0,
	841, 0, 0, 0, 0, 0, 0, 728, 740, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 738, 0, 0, 0, 0,
	792, 0, 739, 0, 0, 787, 766, 770, 0, 0,
	0, 0, 290, 424, 442, 301, 413, 455, 306, 421,
	296, 386, 410, 0, 0, 292, 440, 420, 368, 347,
	348, 291, 0, 404, 325, 339, 322, 384, 767, 790,
	794, 321, 863, 788, 450, 294, 0, 449, 383, 436,
	441, 369, 363, 0, 293, 438, 367, 362, 351, 329,
	864, 352, 353, 343, 395, 361, 396, 344, 373, 372,
	374, 0, 0, 0, 0, 0, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	609, 785, 0, 613, 0, 452, 0, 0, 847, 0,
	0, 0, 423, 0, 0, 354, 0, 0, 0, 789,
	0, 407, 389, 860, 0, 0, 405, 359, 437, 397,
	443, 425, 451, 401, 398, 285, 426, 324, 370, 297,
	299, 319, 326, 328, 330, 331, 379, 380, 392, 412,
	428, 429, 430, 323, 307, 406, 308, 341, 309, 286,
	315, 313, 316, 414, 317, 288, 393, 434, 0, 336,
	402, 366, 289, 365, 394, 433, 432, 298, 459, 465,
	466, 555, 0, 471, 636, 637, 638, 480, 485, 486,
	487, 489, 490, 491, 492, 556, 573, 540, 510, 473,
	564, 507, 511, 512, 576, 0, 0, 0, 464, 355,
	356, 0, 334, 282, 283, 631, 845, 385, 578, 611,
	612, 503, 0, 859, 840, 842, 843, 846, 850, 851,
	852, 853, 854, 856, 858, 862, 630, 0, 557, 572,
	634, 571, 627, 391, 0, 411, 569, 516, 0, 561,
	535, 0, 562, 531, 566, 0, 505, 0, 419, 445,
	457, 474, 477, 506, 591, 592, 593, 287, 476, 595,
	596, 597, 598, 599, 600, 601, 594, 861, 538, 515,
	541, 456, 518, 517, 0, 0, 552, 793, 553, 554,
	375, 376, 377, 378, 848, 579, 305, 475, 400, 0,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	545, 542, 639, 0, 602, 603, 0, 0, 469, 470,
	333, 340, 488, 342, 304, 390, 335, 454, 349, 0,
	481, 546, 482, 605, 608, 606, 607, 382, 345, 346,
	415, 350, 360, 403, 453, 388, 408, 302, 444, 417,
	364, 532, 559, 870, 844, 869, 871, 872, 868, 873,
	874, 855, 749, 0, 800, 866, 865, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	586, 585, 584, 583, 582, 581, 580, 0, 0, 529,
	431, 314, 276, 310, 311, 318, 628, 625, 435, 629,
	0, 284, 509, 358, 0, 399, 332, 574, 575, 0,
	0, 833, 807, 808, 809, 746, 810, 804, 805, 747,
	806, 834, 798, 830, 831, 774, 801, 811, 829, 812,
	832, 835, 836, 875, 876, 818, 802, 248, 877, 815,
	837, 828, 827, 813, 799, 838, 839, 781, 776, 816,
	817, 803, 821, 822, 823, 748, 795, 796, 797, 819,
	820, 777, 778, 779, 780, 0, 0, 0, 460, 461,
	462, 484, 0, 446, 508, 626, 0, 0, 0, 0,
	0, 0, 0, 558, 570, 604, 0, 614, 615, 617,
	619, 824, 621, 422, 0, 0, 409, 427, 416, 791,
	632, 499, 500, 633, 610, 0, 741, 0, 387, 0,
	514, 547, 536, 620, 502, 0, 0, 1677, 0, 0,
	0, 744, 0, 0, 0, 327, 0, 0, 357, 551,
	533, 543, 534, 519, 520, 521, 528, 337, 522, 523,
	524, 494, 525, 495, 526, 527, 782, 550, 501, 418,
	371, 568, 567, 0, 0, 849, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 772, 826, 825, 759, 769, 0, 0, 300, 220,
	496, 616, 498, 497, 760, 0, 761, 765, 768, 764,
	762, 763, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 737, 738, 0,
	0, 0, 0, 792, 0, 739, 0, 0, 787, 766,
	770, 0, 0, 0, 0, 290, 424, 442, 301, 413,
	455, 306, 421, 296, 386, 410, 0, 0, 292, 440,
	420, 368, 347, 348, 291, 0, 404, 325, 339, 322,
	384, 767, 790, 794, 321, 863, 788, 450, 294, 0,
	449, 383, 436, 441, 369, 363, 0, 293, 438, 367,
	362, 351, 329, 864, 352, 353, 343, 395, 361, 396,
	344, 373, 372, 374, 0, 0, 0, 0, 0, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 785, 0, 613, 0, 452, 0,
	0, 847, 0, 0, 0, 423, 0, 0, 354, 0,
	0, 0, 789, 0, 407, 389, 860, 0, 0, 405,
	359, 437, 397, 443, 425, 451, 401, 398, 285, 426,
	324, 370, 297, 299, 319, 326, 328, 330, 331, 379,
	380, 392, 412, 428, 429, 430, 323, 307, 406, 308,
	341, 309, 286, 315, 313, 316, 414, 317, 288, 393,
	434, 0, 336, 402, 366, 289, 365, 394, 433, 432,
	298, 459, 1678, 1679, 555, 0, 471, 636, 637, 638,
	480, 485, 486, 487, 489, 490, 491, 492, 556, 573,
	540, 510, 473, 564, 507, 511, 512, 576, 0, 0,
	0, 464, 355, 356, 0, 334, 282, 283, 631, 845,
	385, 578, 611, 612, 503, 0, 859, 840, 842, 843,
	846, 850, 851, 852, 853, 854, 856, 858, 862, 630,
	0, 557, 572, 634, 571, 627, 391, 0, 411, 569,
	516, 0, 561, 535, 0, 562, 531, 566, 0, 505,
	0, 419, 445, 457, 474, 477, 506, 591, 592, 593,
	287, 476, 595, 596, 597, 598, 599, 600, 601, 594,
	861, 538, 515, 541, 456, 518, 517, 0, 0, 552,
	793, 553, 554, 375, 376, 377, 378, 848, 579, 305,
	475, 400, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 545, 542, 639, 0, 602, 603, 0,
	0, 469, 470, 333, 340, 488, 342, 304, 390, 335,
	454, 349, 0, 481, 546, 482, 605, 608, 606, 607,
	382, 345, 346, 415, 350, 360, 403, 453, 388, 408,
	302, 444, 417, 364, 532, 559, 870, 844, 869, 871,
	872, 868, 873, 874, 855, 749, 0, 800, 866, 865,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 587, 586, 585, 584, 583, 582, 581, 580,
	0, 0, 529, 431, 314, 276, 310, 311, 318, 628,
	625, 435, 629, 0, 284, 509, 358, 0, 399, 332,
	574, 575, 0, 0, 833, 807, 808, 809, 746, 810,
	804, 805, 747, 806, 834, 798, 830, 831, 774, 801,
	811, 829, 812, 832, 835, 836, 875, 876, 818, 802,
	248, 877, 815, 837, 828, 827, 813, 799, 838, 839,
	781, 776, 816, 817, 803, 821, 822, 823, 748, 795,
	796, 797, 819, 820, 777, 778, 779, 780, 0, 0,
	0, 460, 461, 462, 484, 0, 446, 508, 626, 0,
	0, 0, 0, 0, 0, 0, 558, 570, 604, 0,
	614, 615, 617, 619, 824, 621, 422, 0, 0, 409,
	427, 416, 791, 632, 499, 500, 633, 610, 0, 741,
	0, 387, 0, 514, 547, 536, 620, 502, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 327, 0,
	0, 357, 551, 533, 543, 534, 519, 520, 521, 528,
	337, 522, 523, 524, 494, 525, 495, 526, 527, 782,
	550, 501, 418, 371, 568, 567, 0, 0, 849, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 772, 826, 825, 759, 769, 0,
	0, 300, 220, 496, 616, 498, 497, 760, 0, 761,
	765, 768, 764, 762, 763, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 738, 0, 0, 0, 0, 792, 0, 739, 0,
	0, 787, 766, 770, 0, 0, 0, 0, 290, 424,
	442, 301, 413, 455, 306, 421, 296, 386, 410, 0,
	0, 292, 440, 420, 368, 347, 348, 291, 0, 404,
	325, 339, 322, 384, 767, 790, 794, 321, 863, 788,
	450, 294, 0, 449, 383, 436, 441, 369, 363, 0,
	293, 438, 367, 362, 351, 329, 864, 352, 353, 343,
	395, 361, 396, 344, 373, 372, 374, 0, 0, 0,
	0, 0, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 785, 0, 613,
	0, 452, 0, 0, 847, 0, 0, 0, 423, 0,
	0, 354, 0, 0, 0, 789, 0, 407, 389, 860,
	0, 0, 405, 359, 437, 397, 443, 425, 451, 401,
	398, 285, 426, 324, 370, 297, 299, 319, 326, 328,
	330, 331, 379, 380, 392, 412, 428, 429, 430, 323,
	307, 406, 308, 341, 309, 286, 315, 313, 316, 414,
	317, 288, 393, 434, 0, 336, 402, 366, 289, 365,
	394, 433, 432, 298, 459, 465, 466, 555, 0, 471,
	636, 637, 638, 480, 485, 486, 487, 489, 490, 491,
	492, 556, 573, 540, 510, 473, 564, 507, 511, 512,
	576, 0, 0, 0, 464, 355, 356, 0, 334, 282,
	283, 631, 845, 385, 578, 611, 612, 503, 0, 859,
	840, 842, 843, 846, 850, 851, 852, 853, 854, 856,
	858, 862, 630, 0, 557, 572, 634, 571, 627, 391,
	0, 411, 569, 516, 0, 561, 535, 0, 562, 531,
	566, 0, 505, 0, 419, 445, 457, 474, 477, 506,
	591, 592, 593, 287, 476, 595, 596, 597, 598, 599,
	600, 601, 594, 861, 538, 515, 541, 456, 518, 517,
	0, 0, 552, 793, 553, 554, 375, 376, 377, 378,
	848, 579, 305, 475, 400, 0, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 544, 545, 542, 639, 0,
	602, 603, 0, 0, 469, 470, 333, 340, 488, 342,
	304, 390, 335, 454, 349, 0, 481, 546, 482, 605,
	608, 606, 607, 382, 345, 346, 415, 350, 360, 403,
	453, 388, 408, 302, 444, 417, 364, 532, 559, 870,
	844, 869, 871, 872, 868, 873, 874, 855, 749, 0,
	800, 866, 865, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 586, 585, 584, 583,
	582, 581, 580, 0, 0, 529, 431, 314, 276, 310,
	311, 318, 628, 625, 435, 629, 0, 284, 509, 358,
	0, 399, 332, 574, 575, 0, 0, 833, 807, 808,
	809, 746, 810, 804, 805, 747, 806, 834, 798, 830,
	831, 774, 801, 811, 829, 812, 832, 835, 836, 875,
	876, 818, 802, 248, 877, 815, 837, 828, 827, 813,
	799, 838, 839, 781, 776, 816, 817, 803, 821, 822,
	823, 748, 795, 796, 797, 819, 820, 777, 778, 779,
	780, 0, 0, 0, 460, 461, 462, 484, 0, 446,
	508, 626, 0, 0, 0, 0, 0, 0, 0, 558,
	570, 604, 0, 614, 615, 617, 619, 824, 621, 422,
	0, 0, 409, 427, 416, 791, 632, 499, 500, 633,
	610, 0, 741, 0, 387, 0, 514, 547, 536, 620,
	502, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 327, 0, 0, 357, 551, 533, 543, 534, 519,
	520, 521, 528, 337, 522, 523, 524, 494, 525, 495,
	526, 527, 782, 550, 501, 418, 371, 568, 567, 0,
	0, 849, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 772, 826, 825,
	759, 769, 0, 0, 300, 220, 496, 616, 498, 497,
	760, 0, 761, 765, 768, 764, 762, 763, 0, 841,
	0, 0, 0, 0, 0, 0, 728, 740, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 738, 0, 0, 0, 0, 792,
	0, 739, 0, 0, 787, 766, 770, 0, 0, 0,
	0, 290, 424, 442, 301, 413, 455, 306, 421, 296,
	386, 410, 0, 0, 292, 440, 420, 368, 347, 348,
	291, 0, 404, 325, 339, 322, 384, 767, 790, 794,
	321, 863, 788, 450, 294, 0, 449, 383, 436, 441,
	369, 363, 0, 293, 438, 367, 362, 351, 329, 864,
	352, 353, 343, 395, 361, 396, 344, 373, 372, 374,
	0, 0, 0, 0, 0, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 609,
	785, 0, 613, 0, 452, 0, 0, 847, 0, 0,
	0, 423, 0, 0, 354, 0, 0, 0, 789, 0,
	407, 389, 860, 0, 0, 405, 359, 437, 397, 443,
	425, 451, 401, 398, 285, 426, 324, 370, 297, 299,
	319, 326, 328, 330, 331, 379, 380, 392, 412, 428,
	429, 430, 323, 307, 406, 308, 341, 309, 286, 315,
	313, 316, 414, 317, 288, 393, 434, 0, 336, 402,
	366, 289, 365, 394, 433, 432, 298, 459, 465, 466,
	555, 0, 471, 636, 637, 638, 480, 485, 486, 487,
	489, 490, 491, 492, 556, 573, 540, 510, 473, 564,
	507, 511, 512, 576, 0, 0, 0, 464, 355, 356,
	0, 334, 282, 283, 631, 845, 385, 578, 611, 612,
	503, 0, 859, 840, 842, 843, 846, 850, 851, 852,
	853, 854, 856, 858, 862, 630, 0, 557, 572, 634,
	571, 627, 391, 0, 411, 569, 516, 0, 561, 535,
	0, 562, 531, 566, 0, 505, 0, 419, 445, 457,
	474, 477, 506, 591, 592, 593, 287, 476, 595, 596,
	597, 598, 599, 600, 601, 594, 861, 538, 515, 541,
	456, 518, 517, 0, 0, 552, 793, 553, 554, 375,
	376, 377, 378, 848, 579, 305, 475, 400, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 545,
	542, 639, 0, 602, 603, 0, 0, 469, 470, 333,
	340, 488, 342, 304, 390, 335, 454, 349, 0, 481,
	546, 482, 605, 608, 606, 607, 382, 345, 346, 415,
	350, 360, 403, 453, 388, 408, 302, 444, 417, 364,
	532, 559, 870, 844, 869, 871, 872, 868, 873, 874,
	855, 749, 0, 800, 866, 865, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 586,
	585, 584, 583, 582, 581, 580, 0, 0, 529, 431,
	314, 276, 310, 311, 318, 628, 625, 435, 629, 0,
	284, 509, 358, 0, 399, 332, 574, 575, 0, 0,
	833, 807, 808, 809, 746, 810, 804, 805, 747, 806,
	834, 798, 830, 831, 774, 801, 811, 829, 812, 832,
	835, 836, 875, 876, 818, 802, 248, 877, 815, 837,
	828, 827, 813, 799, 838, 839, 781, 776, 816, 817,
	803, 821, 822, 823, 748, 795, 796, 797, 819, 820,
	777, 778, 779, 780, 0, 0, 0, 460, 461, 462,
	484, 0, 446, 508, 626, 0, 0, 0, 0, 0,
	0, 0, 558, 570, 604, 0, 614, 615, 617, 619,
	824, 621, 422, 0, 0, 409, 427, 416, 0, 632,
	499, 500, 633, 610, 0, 741, 197, 61, 188, 160,
	0, 0, 0, 0, 0, 0, 387, 0, 514, 547,
	536, 620, 502, 0, 189, 0, 0, 0, 0, 0,
	0, 181, 0, 327, 0, 190, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 134, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 159, 187, 195, 0, 119,
	0, 609, 0, 0, 613, 0, 452, 0, 0, 212,
	0, 0, 0, 423, 0, 0, 354, 186, 180, 179,
	468, 0, 407, 389, 224, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 588, 589, 590, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 447, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 215, 560, 563, 493, 225, 0, 557,
	572, 530, 571, 226, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	132, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 223, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 230, 295, 435,
	231, 0, 284, 509, 358, 161, 399, 332, 574, 575,
	58, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 227, 45, 213, 216,
	218, 217, 0, 59, 558, 570, 604, 5, 614, 615,
	617, 619, 618, 621, 422, 0, 197, 409, 427, 416,
	137, 228, 499, 500, 229, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 134, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 2346, 2349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 2350, 452, 0, 0, 0,
	2345, 0, 2344, 423, 2342, 2347, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 2348,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 161, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 0, 219,
	0, 0, 759, 769, 0, 0, 300, 220, 496, 616,
	498, 497, 760, 0, 761, 765, 768, 764, 762, 763,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 767,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 0, 452, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 197, 61, 188, 160,
	0, 0, 0, 0, 0, 0, 387, 658, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 663, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 662,
	0, 609, 0, 0, 613, 0, 452, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 659, 661, 305, 475, 400,
	672, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 161, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 2499, 2502, 2503, 2504,
	2505, 2506, 2507, 0, 2512, 2508, 2509, 2510, 2511, 0,
	2494, 2495, 2496, 2497, 1084, 2478, 2500, 0, 2479, 383,
	2480, 2481, 2482, 2483, 1088, 2484, 2485, 2486, 2487, 2488,
	2491, 2492, 2489, 2490, 2498, 395, 361, 396, 344, 373,
	372, 374, 1112, 1114, 1116, 1118, 1121, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 0, 452, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 354, 0, 0, 0,
	2493, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 2501, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 2346, 2349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 2350, 452, 0, 0, 0,
	2345, 0, 2344, 423, 2342, 2347, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 2348,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 2367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 2366, 452, 0, 0, 0,
	2372, 2369, 2371, 423, 0, 2370, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 2364, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 2367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 2366, 452, 0, 0, 0,
	2372, 2369, 2371, 423, 0, 2370, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 2066, 0,
	0, 0, 0, 327, 0, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 2067, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 1218, 1219, 1220, 1217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 442, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 0, 450, 294, 0, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 0, 452, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 401, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 601, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 472, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 382, 345,
	346, 415, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 364, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 0, 409, 427, 416,
	0, 632, 499, 500, 633, 610, 387, 0, 514, 547,
	536, 620, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 1015, 0, 357, 551, 533, 543,
	534, 519, 520, 521, 528, 337, 522, 523, 524, 494,
	525, 495, 526, 527, 0, 550, 501, 418, 371, 568,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	1022, 1023, 0, 0, 0, 0, 300, 220, 496, 616,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 424, 1010, 301, 413, 455, 306,
	421, 296, 386, 410, 0, 0, 292, 440, 420, 368,
	347, 348, 291, 0, 404, 325, 339, 322, 384, 0,
	439, 467, 321, 458, 998, 450, 294, 997, 449, 383,
	436, 441, 369, 363, 0, 293, 438, 367, 362, 351,
	329, 483, 352, 353, 343, 395, 361, 396, 344, 373,
	372, 374, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 613, 0, 452, 0, 0, 0,
	0, 0, 0, 423, 0, 0, 354, 0, 0, 0,
	468, 0, 407, 389, 635, 0, 0, 405, 359, 437,
	397, 443, 425, 451, 1013, 398, 285, 426, 324, 370,
	297, 299, 319, 326, 328, 330, 331, 379, 380, 392,
	412, 428, 429, 430, 323, 307, 406, 308, 341, 309,
	286, 315, 313, 316, 414, 317, 288, 393, 434, 0,
	336, 402, 366, 289, 365, 394, 433, 432, 298, 459,
	465, 466, 555, 0, 471, 636, 637, 638, 480, 485,
	486, 487, 489, 490, 491, 492, 556, 573, 540, 510,
	473, 564, 507, 511, 512, 576, 0, 0, 0, 464,
	355, 356, 0, 334, 282, 283, 631, 320, 385, 578,
	611, 612, 503, 0, 565, 504, 513, 312, 537, 549,
	548, 381, 463, 0, 560, 563, 493, 630, 0, 557,
	572, 634, 571, 627, 391, 0, 411, 569, 516, 0,
	561, 535, 0, 562, 531, 566, 0, 505, 0, 419,
	445, 457, 474, 477, 506, 591, 592, 593, 287, 476,
	595, 596, 597, 598, 599, 600, 1014, 594, 448, 538,
	515, 541, 456, 518, 517, 0, 0, 552, 1017, 553,
	554, 375, 376, 377, 378, 338, 579, 305, 475, 400,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 545, 542, 639, 0, 602, 603, 0, 0, 469,
	470, 333, 340, 488, 342, 304, 390, 335, 454, 349,
	0, 481, 546, 482, 605, 608, 606, 607, 1024, 1011,
	1020, 1012, 350, 360, 403, 453, 388, 408, 302, 444,
	417, 1021, 532, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 586, 585, 584, 583, 582, 581, 580, 0, 0,
	529, 431, 314, 276, 310, 311, 318, 628, 625, 435,
	629, 0, 284, 509, 358, 0, 399, 332, 574, 575,
	0, 0, 232, 233, 234, 235, 236, 237, 238, 239,
	277, 240, 241, 242, 243, 244, 245, 246, 249, 250,
	251, 252, 253, 254, 255, 256, 577, 247, 248, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 0, 0, 0, 278, 279, 280, 281,
	0, 0, 272, 273, 274, 275, 0, 0, 0, 460,
	461, 462, 484, 0, 446, 508, 626, 0, 0, 0,
	0, 0, 0, 0, 558, 570, 604, 0, 614, 615,
	617, 619, 618, 621, 422, 0, 1009, 409, 427, 416,
	197, 632, 499, 500, 633, 610, 0, 0, 0, 0,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 134, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 2116, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 161,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	197, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 134, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 2102, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 161,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	197, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 134, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1998, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 161,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 1022, 1023, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 998, 450,
	294, 997, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 1024, 2018, 1020, 2019, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 1021, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 2877,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 2880, 0, 0, 2879, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 1501, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 1495, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3910, 0, 219, 826, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1707, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 2441, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 2443, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 2066, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 2067, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 3083, 3085, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 2463, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 646, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 645, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 826, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3889, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 3665, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 3796, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3510, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3680, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 3597, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 3117, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1998, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 3321,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3237, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 2443, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 2800,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 2560, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 2519, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 2302, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 1855, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 1984, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 1499, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 1889, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 1528, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 646, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 656, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 947, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 1479,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 1477,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 401, 398,
	285, 426, 324, 370, 297, 299, 723, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	601, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 0, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	0, 409, 427, 416, 0, 632, 499, 500, 633, 610,
	387, 0, 514, 547, 536, 620, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	357, 551, 533, 543, 534, 519, 520, 521, 528, 337,
	522, 523, 524, 494, 525, 495, 526, 527, 0, 550,
	501, 418, 371, 568, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	300, 220, 496, 616, 498, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 424, 442,
	301, 413, 455, 306, 421, 296, 386, 410, 0, 0,
	292, 440, 420, 368, 347, 348, 291, 0, 404, 325,
	339, 322, 384, 0, 439, 467, 321, 458, 0, 450,
	294, 0, 449, 383, 436, 441, 369, 363, 0, 293,
	438, 367, 362, 351, 329, 483, 352, 353, 343, 395,
	361, 396, 344, 373, 372, 374, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 609, 0, 0, 613, 0,
	452, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	354, 0, 0, 0, 468, 0, 407, 389, 635, 0,
	0, 405, 359, 437, 397, 443, 425, 451, 680, 398,
	285, 426, 324, 370, 297, 299, 319, 326, 328, 330,
	331, 379, 380, 392, 412, 428, 429, 430, 323, 307,
	406, 308, 341, 309, 286, 315, 313, 316, 414, 317,
	288, 393, 434, 0, 336, 402, 366, 289, 365, 394,
	433, 432, 298, 459, 465, 466, 555, 0, 471, 636,
	637, 638, 480, 485, 486, 487, 489, 490, 491, 492,
	556, 573, 540, 510, 473, 564, 507, 511, 512, 576,
	0, 0, 0, 464, 355, 356, 0, 334, 282, 283,
	631, 320, 385, 578, 611, 612, 503, 0, 565, 504,
	513, 312, 537, 549, 548, 381, 463, 0, 560, 563,
	493, 630, 0, 557, 572, 634, 571, 627, 391, 0,
	411, 569, 516, 0, 561, 535, 0, 562, 531, 566,
	0, 505, 0, 419, 445, 457, 474, 477, 506, 591,
	592, 593, 287, 476, 595, 596, 597, 598, 599, 600,
	681, 594, 448, 538, 515, 541, 456, 518, 517, 0,
	0, 552, 472, 553, 554, 375, 376, 377, 378, 338,
	579, 305, 475, 400, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 545, 542, 639, 0, 602,
	603, 0, 0, 469, 470, 333, 340, 488, 342, 304,
	390, 335, 454, 349, 0, 481, 546, 482, 605, 608,
	606, 607, 382, 345, 346, 415, 350, 360, 403, 453,
	388, 408, 302, 444, 417, 364, 532, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 587, 586, 585, 584, 583, 582,
	581, 580, 0, 0, 529, 431, 314, 276, 310, 311,
	318, 628, 625, 435, 629, 0, 284, 509, 358, 0,
	399, 332, 574, 575, 0, 0, 232, 233, 234, 235,
	236, 237, 238, 239, 277, 240, 241, 242, 243, 244,
	245, 246, 249, 250, 251, 252, 253, 254, 255, 256,
	577, 247, 248, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	278, 279, 280, 281, 1101, 0, 272, 273, 274, 275,
	0, 0, 0, 460, 461, 462, 484, 0, 446, 508,
	626, 0, 0, 0, 0, 0, 0, 0, 558, 570,
	604, 0, 614, 615, 617, 619, 618, 621, 422, 0,
	1086, 409, 427, 416, 1076, 632, 499, 500, 633, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1109, 1113, 1115, 1117, 1119, 1120, 1122, 0, 1127, 1123,
	1124, 1125, 1126, 0, 1104, 1105, 1106, 1107, 1084, 1085,
	1110, 0, 1087, 0, 1089, 1090, 1091, 1092, 1088, 1093,
	1094, 1095, 1096, 1097, 1100, 1102, 1098, 1099, 1108, 0,
	0, 0, 0, 0, 0, 0, 1112, 1114, 1116, 1118,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1971, 0, 1086, 0, 0, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 0, 1109, 1113, 1115, 1117,
	1119, 1120, 1122, 3519, 1127, 1123, 1124, 1125, 1126, 1973,
	1104, 1105, 1106, 1107, 1084, 1085, 1110, 0, 1087, 0,
	1089, 1090, 1091, 1092, 1088, 1093, 1094, 1095, 1096, 1097,
	1100, 1102, 1098, 1099, 1108, 1971, 0, 0, 0, 0,
	0, 0, 1112, 1114, 1116, 1118, 1121, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1948, 0, 0, 0, 0, 0, 0, 0, 0,
	1973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3686, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1948, 0, 0, 0, 0, 0, 0, 1964,
	0, 0, 1971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1964, 0, 0, 1971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1952, 0, 0, 0, 0, 0, 0, 0, 0, 1948,
	0, 1958, 0, 0, 0, 0, 0, 0, 1973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1946, 1980, 0, 0, 1947, 1949, 1951, 0, 1953,
	1954, 1955, 1959, 1960, 1961, 1963, 1966, 1967, 1968, 0,
	0, 0, 0, 0, 0, 0, 1956, 1965, 1957, 0,
	0, 1952, 0, 0, 0, 0, 0, 1111, 0, 0,
	1948, 0, 1958, 3657, 0, 0, 0, 1964, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1972, 0, 1946, 1980, 0, 0, 1947, 1949, 1951, 0,
	1953, 1954, 1955, 1959, 1960, 1961, 1963, 1966, 1967, 1968,
	0, 0, 0, 0, 0, 0, 0, 1956, 1965, 1957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1969, 0, 0, 1964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1972, 1945, 1111, 0, 0, 0, 0, 1952, 1944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1962, 0, 0, 0, 0, 0, 1946,
	1980, 0, 1950, 1947, 1949, 1951, 1969, 1953, 1954, 1955,
	1959, 1960, 1961, 1963, 1966, 1967, 1968, 0, 0, 0,
	0, 0, 0, 1945, 1956, 1965, 1957, 0, 0, 1952,
	1944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1962, 0, 0, 0, 1972, 0,
	1946, 1980, 0, 1950, 1947, 1949, 1951, 0, 1953, 1954,
	1955, 1959, 1960, 1961, 1963, 1966, 1967, 1968, 0, 0,
	0, 0, 0, 0, 0, 1956, 1965, 1957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 1972,
	1945, 0, 0, 0, 0, 0, 0, 1944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1962, 0, 0, 0, 0, 0, 0, 0, 0,
	1950, 0, 0, 0, 1969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1945, 0, 0, 0, 0, 0, 0, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1962, 0, 0, 0, 0, 0, 0, 0,
	0, 1950,
}

var yyPact = [...]int{
	452, -1000, -1000, -1000, -316, 13853, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46727, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 456, 46727,
	-314, 28747, 44867, -1000, -1000, 2649, -1000, 45487, 15723, 46727,
	522, 519, 46727, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 904,
	-1000, 49207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	829, 4029, 48587, 10729, -208, -1000, 1520, -29, 2473, 499,
	-183, -191, 1040, 1068, 1159, 1159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 234,
	933, 46107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3563, 239, 933, 19443,
	117, 110, 1520, 450, -86, 181, -1000, 1256, 3906, 203,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10729, 10729, 13853, -355, 13853, 10729, 46727, 46727, -1000,
	-1000, -1000, -1000, -314, 45487, 829, 4029, 10729, 2473, 499,
	-183, -191, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -86, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 110, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49687, -1000, 1560, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2260, 3064, 1550, 2471, 761, 44867, 46727, -1000, 152, 761,
	-1000, -1000, -1000, 1520, 3453, -1000, 46727, 46727, 210, 1814,
	-1000, 556, 414, 446, 339, 1536, -1000, -1000, -1000, -1000,
	-1000, -1000, 678, 3405, -1000, 46727, 46727, 3079, 46727, -1000,
	2187, 733, -1000, 4077, 3268, 1385, 927, 3099, -1000, -1000,
	3062, -1000, 343, 351, 336, 736, 455, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 300, -1000, 3322, -1000, -1000, 329,
	-1000, -1000, 315, -1000, -1000, -1000, 106, -1000, -1000, -1000,
	-1000, -1000, -1000, 5, -1000, -1000, 1119, 1901, 10729, 2051,
	-1000, 4010, 1574, -1000, -1000, -1000, 6362, 12598, 12598, 12598,
	12598, 46727, -1000, -1000, 2808, 10729, 3061, 3056, 3055, 3050,
	-1000, -1000, -1000, -1000, -1000, -1000, 1535, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1941, -1000, -1000, -1000,
	13221, -1000, 3045, 3044, 3025, 3022, 3019, 3018, 3017, 3016,
	3015, 3014, 3012, 3005, 3004, 3001, 2650, 15093, 2997, 2470,
	2468, 2996, 2995, 2976, 2467, 2961, 2953, 2952, 2650, 2650,
	2951, 2934, 2932, 2927, 2921, 2919, 2918, 2916, 2912, 2902,
	2894, 2893, 2892, 2881, 2879, 2873, 2872, 2867, 2866, 2865,
	2864, 2863, 2862, 2859, 2855, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1341, -1000,
	2854, 3399, 2726, -1000, 3303, 3299, 3293, 3290, -253, 2852,
	2159, -1000, -1000, 107, 3404, 46727, -276, 46727, 2460, -99,
	2459, -100, -1000, -71, -1000, -1000, 1050, -1000, 1015, -1000,
	818, 818, 818, 46727, 46727, 229, 925, 818, 818, 818,
	818, 818, 843, 818, 3335, 899, 893, 891, 887, 818,
	-41, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1808, 1805,
	3160, 993, -1000, -1000, -1000, -1000, 1423, 46727, -1000, 2758,
	2458, -298, 1705, 1705, 3388, 3388, 3334, 742, 740, 737,
	1705, 602, -1000, 1761, 1761, 1761, 1761, 1705, 487, 746,
	3338, 3338, 126, 1761, 79, 1705, 1705, 79, 1705, 1705,
	-1000, 1728, 255, -262, -1000, -1000, -1000, -1000, 1761, 1761,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3317, 3315, 829,
	829, 46727, 829, 211, 46727, 829, 829, 829, 834, -295,
	41, 47967, 47347, 2187, 724, 706, 1426, 1778, -1000, 1700,
	46727, 46727, 1700, 1700, 23787, 23167, -1000, 46727, -1000, 3399,
	2726, 2659, 1727, 2654, 2726, -101, 2452, 829, 829, 829,
	829, 829, 291, 829, 829, 829, 829, 829, 46727, 46727,
	44247, 829, 829, 829, 829, 8854, 8854, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13853, 2055, 2209, 199,
	2, -296, 275, -1000, -1000, -1000, 46727, 3230, 301, -1000,
	-1000, -1000, 2672, -1000, 2741, 2741, 2741, 2741, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2741, 2741,
	2749, 2850, -1000, -1000, 2734, 2734, 2734, 2672, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2744, 2744, 2747, 2747, 2744, 46727, -123,
	-1000, -1000, 10729, 46727, 3256, 403, 2848, 761, -1000, -1000,
	46727, 189, 438, 3399, 3239, 3338, 3378, -1000, -1000, 1534,
	2156, 2449, -1000, 339, -1000, 440, 339, 1687, -1000, 1081,
	-1000, -1000, -1000, -1000, -1000, 46727, 5, 429, -1000, -1000,
	2414, 2816, -1000, 624, 1271, 1417, -1000, 294, 4467, 37427,
	2187, 37427, 46727, -1000, -1000, -1000, -1000, -1000, -1000, 104,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 311, -1000, 10729, 10729, 10729, 10729,
	10729, -1000, 754, 11975, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12598, 12598, 12598, 12598, 12598, 12598, 12598, 12598, 12598,
	12598, 12598, 12598, 2805, 1760, 12598, 12598, 12598, 12598, 25647,
	1727, 3109, 1425, 312, 1574, 1574, 1574, 1574, 10729, -1000,
	1841, 1901, 10729, 10729, 10729, 10729, 46727, -1000, -1000, 4515,
	10729, 10729, 1455, 10729, 3288, 10729, 10729, 10729, 2641, 5107,
	46727, 10729, -1000, 2640, 2637, -1000, -1000, 1973, 10729, -1000,
	-1000, 10729, -1000, -1000, 10729, 12598, 10729, -1000, 10729, 10729,
	10729, -1000, -1000, 3878, 3288, 3288, 3288, 1762, 10729, 10729,
	3288, 3288, 3288, 1748, 3288, 3288, 3288, 3288, 3288, 3288,
	3288, 3288, 3288, 3288, 2636, 2635, 2633, 10106, 3338, -208,
	-1000, 8231, 3239, 3338, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -256, 2815, 46727, 2448, 2443, -325,
	194, 470, 46727, 1100, 401, 2151, -104, 2150, 82, 1059,
	1022, 1025, -1000, 2441, 1873, 46727, 46727, 3284, -1000, 2814,
	46727, 818, 818, 818, -1000, 42387, 37427, 46727, 46727, 2187,
	46727, 46727, 46727, 818, 818, 818, 818, 46727, -1000, 3184,
	37427, 3171, 834, -1000, 46727, 1423, 3283, 46727, 401, -1000,
	-1000, -1000, 3388, 12598, 12598, -1000, -1000, 10729, -1000, 43627,
	1761, 1705, 1705, -1000, -1000, 46727, -1000, -1000, -1000, 1761,
	46727, 1761, 1761, 3388, 1761, -1000, -1000, -1000, 1705, 1705,
	-1000, -1000, 10729, -1000, -1000, 1761, 1761, -1000, -1000, 3388,
	46727, 91, 3388, 3388, 131, -1000, -1000, -1000, 1705, 46727,
	46727, 818, 46727, -1000, 46727, 46727, -1000, -1000, 46727, 46727,
	4333, 46727, 42387, 43007, 3310, -1000, 37427, 46727, 46727, 34947,
	-1000, 46727, 1388, -1000, 35, -1000, 75, 41, 1700, 41,
	1700, -1000, 621, 636, 21927, 540, 37427, 5730, -1000, -1000,
	1700, 1700, 5730, 5730, 1604, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1422, -1000, 271, 3338, -1000, -1000, -1000, -1000,
	-1000, 2126, 401, 46727, 42387, 37427, 2187, 46727, 829, 46727,
	46727, 46727, 46727, 46727, -1000, 2809, 1532, -1000, 3265, 46727,
	46727, 46727, 46727, 1395, -1000, -1000, 18823, 1524, 1395, -1000,
	1838, -1000, 10729, 13853, -241, 10729, 13853, 13853, 10729, 13853,
	-1000, 10729, 280, -1000, -1000, -1000, -1000, 2123, -1000, 2121,
	-1000, -1000, -1000, -1000, -1000, 2440, 2440, -1000, 2120, -1000,
	-1000, -1000, -1000, 2117, -1000, -1000, 2109, -1000, -1000, -1000,
	-1000, -150, 2631, 1119, -1000, 2434, 3097, -210, -1000, 20687,
	46727, 46727, 403, -331, 1804, 1800, 1798, -1000, -210, -1000,
	20067, 46727, 3338, -1000, -213, 3239, 10729, 46727, -1000, 3331,
	-1000, -1000, 339, -1000, 398, 391, -1000, -1000, -1000, -1000,
	-1000, -1000, 1523, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 447, -93, -94, 1418, -1000, 46727, -1000,
	-1000, 294, 37427, 39287, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 252, -1000, -1000, 187, -1000, 867, 251, 1684, -1000,
	-1000, 233, 218, 205, 945, 1901, -1000, 1869, 1869, 1887,
	-1000, 767, -1000, -1000, -1000, -1000, 2808, -1000, -1000, -1000,
	2778, 2907, -1000, 1739, 1739, 1609, 1609, 1609, 1609, 1609,
	1893, 1893, -1000, -1000, -1000, 6362, 2805, 12598, 12598, 12598,
	12598, 890, 890, 4536, 4078, -1000, -1000, -1000, -1000, 10729,
	192, 1837, -1000, 10729, 2895, 1398, 2688, 1483, 1511, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2627,
	2626, 2678, 3403, 2625, 10729, -1000, -1000, 1673, 1653, 1647,
	-1000, 2323, 9483, -1000, -1000, -1000, 2624, 1507, 2618, -1000,
	-1000, -1000, 2617, 1646, 1187, 2616, 2977, 2610, 2604, 2603,
	2602, 1409, 10729, 10729, 10729, 10729, 2587, 1616, 1615, 10729,
	10729, 10729, 10729, 2586, 10729, 10729, 10729, 10729, 10729, 10729,
	10729, 10729, 10729, 10729, 132, 132, 132, 1406, 1405, -1000,
	-1000, 1602, -1000, 1901, -1000, -1000, 3239, -1000, 2804, 2108,
	1402, -1000, -1000, -310, 2363, 46727, 46727, 185, 46727, 2427,
	-277, 46727, -1000, -1000, 2424, -1000, 2419, -1000, -1000, -1000,
	1055, 1009, 1038, 2415, 3260, 3330, 870, 46727, 1121, 2801,
	46727, 46727, 46727, 273, -1000, -1000, 1282, -1000, 251, -3,
	542, 1272, 3075, 3402, -125, 46727, 46727, 46727, 46727, 3282,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41767, -1000,
	2800, 1589, -1000, -1000, -1000, 1574, 1574, 1901, 3071, 46727,
	46727, 3388, 3388, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1761, 3388, 3388, 1379, 1705, 1761, -1000, -1000, 1761, -331,
	-1000, 1761, -1000, -331, 1485, -331, 46727, -1000, -1000, -1000,
	3278, 2758, 1392, -1000, -1000, -1000, 3375, 1912, 793, 793,
	1026, 551, 3374, 17583, -1000, 1683, 1064, 863, 3212, 341,
	-1000, 1683, -147, 769, 1683, 1683, 1683, 1683, 1683, 1683,
	1683, 670, 666, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
	1683, 1683, 1683, 1683, 1065, 1683, 1683, 1683, 1683, 1683,
	-1000, 1683, 2796, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	685, 619, 272, 3309, 386, -1000, 405, 1282, 3308, 444,
	3214, 1323, -1000, -1000, -1000, -1000, 26267, 26267, 21307, 26267,
	-1000, 201, 1700, 41, 55, -1000, -1000, 1388, 5730, 1388,
	5730, -1000, -1000, 857, -1000, -1000, 1272, -1000, 46727, 46727,
	-1000, -1000, 2795, 1795, -1000, -1000, 15093, -1000, 5730, 5730,
	-1000, -1000, 28127, 46727, -1000, 4, -1000, 20, 3239, -1000,
	-1000, 1230, -1000, -1000, 1383, 1272, 3095, 46727, 1230, 1230,
	1230, -1000, -1000, 16343, 46727, 46727, -1000, -1000, -1000, -1000,
	3388, 8854, -1000, 34947, -1000, -1000, 41147, -1000, 40527, 3388,
	1833, -1000, 13853, 2199, 197, -1000, 269, -297, 196, 1881,
	195, 1901, -1000, -1000, 2582, 2577, 1586, -1000, 1584, 2576,
	1581, 1558, 2107, -1000, 66, -1000, 3232, 1274, -1000, 2791,
	-1000, 1537, 3143, -1000, 1378, -1000, 1794, 1515, -1000, -1000,
	-1000, 10729, 39907, 10729, 1274, 1509, 3142, 1378, 3239, 2410,
	-1000, 1362, -1000, 2301, 1475, 202, -1000, -1000, -1000, 46727,
	829, 2414, 1505, 39287, 1288, -1000, 855, 1474, 1468, -1000,
	37427, 334, 37427, -1000, 37427, -1000, -1000, 387, -1000, 46727,
	3235, -1000, -1000, -1000, 2363, 1790, -328, 46727, -1000, -1000,
	-1000, -1000, -1000, 1504, -1000, 890, 890, 4536, 2883, -1000,
	12598, -1000, 12598, 3086, -1000, 1818, -1000, 10729, 2171, 4788,
	10729, 4788, 2776, 25027, 46727, -1000, -1000, 10729, 10729, -1000,
	3078, -1000, -1000, -1000, -1000, 10729, 10729, 2480, -1000, 46727,
	-1000, -1000, -1000, -1000, 25027, -1000, 12598, -1000, -1000, -1000,
	-1000, 10729, 1280, 1280, 3029, 1497, 132, 132, 132, 2998,
	2979, 2959, 1493, 132, 2955, 2900, 2869, 2860, 2724, 2709,
	2684, 2658, 2651, 2615, -1000, 2784, -1000, -1000, 1948, 11352,
	8231, -1000, -1000, 303, 1360, 2104, 2405, 125, -1000, 1789,
	-1000, 2404, 46727, 46727, 1099, -1000, 46727, 3397, -1000, 2400,
	-1000, -1000, -1000, 1003, 2399, -1000, 464, 1971, 173, 305,
	2574, 1348, -1000, -1000, 46727, -1000, -1000, -1000, 16343, 2758,
	2781, 2758, 163, 1683, 648, 37427, 704, -1000, 46727, 2163,
	1782, 3094, 784, 3223, 46727, 2780, 491, 2767, 2765, 3277,
	505, 49773, 46727, 1249, -1000, 1464, 3906, -1000, 46727, -1000,
	2187, -1000, 1705, -1000, -1000, 3388, -1000, -1000, 10729, 10729,
	3388, 1705, 1705, -1000, 1761, -1000, 46727, -1000, -331, 505,
	49773, 3276, 4512, 584, 2205, -1000, 46727, -1000, -1000, -1000,
	888, -1000, 1005, 818, 46727, 1913, 1005, 1908, 2764, -1000,
	-1000, 46727, 46727, 46727, 46727, -1000, -1000, 46727, -1000, 46727,
	46727, 46727, 46727, 46727, 38667, -1000, 46727, 46727, -1000, 46727,
	1907, 46727, 1896, 3259, -1000, 1683, 1683, 938, -1000, -1000,
	611, -1000, 38667, 2100, 2099, 2096, 2093, 2397, 2395, 2389,
	1683, 1683, 2091, 2388, 38047, 2387, 1156, 2073, 2072, 2063,
	2090, 2384, 1027, -1000, 2380, 2050, 2040, 2037, 46727, 2761,
	2303, -1000, -1000, 1971, 163, 1683, 378, 46727, 1773, 1764,
	648, 534, -15, 22547, 46727, 34947, 34947, 34947, 34947, -1000,
	3119, 3118, 3115, -1000, 3128, 3112, 3146, 46727, 34947, 2758,
	-1000, 38047, -1000, -1000, -1000, 1727, 1489, 3178, 986, 10729,
	5730, -1000, -1000, 25, 60, -1000, -1000, -1000, 37427, 2371,
	540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3328, 46727,
	46727, 841, 2572, 1340, -1000, -1000, -1000, 49773, 2741, 2741,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2741,
	2741, 2749, -1000, -1000, 2734, 2734, 2734, 2672, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2744, 2744,
	2747, 2747, 2744, -1000, -1000, 3384, -1000, 1317, -1000, -1000,
	1442, -1000, 3384, 1862, -317, 13853, 1783, 1741, -1000, 10729,
	13853, 10729, -242, 363, -245, -1000, -1000, -1000, 2369, -1000,
	-1000, -1000, 2057, -1000, 2056, -1000, 164, 224, 1895, -210,
	8231, 448, 46727, -210, 46727, 8231, -1000, 46727, 188, -347,
	-349, 175, 413, -210, 3328, 66, 10729, 3200, -1000, -1000,
	46727, 2054, -1000, -1000, -1000, 3395, 37427, 2187, 1630, 36807,
	-1000, 322, -1000, 247, 600, 2366, -1000, 878, 124, 2365,
	2363, -1000, -1000, -1000, -1000, 12598, 1574, -1000, -1000, -1000,
	1901, 10729, 2571, -1000, 1019, 1019, 2351, 2565, 2563, -1000,
	2741, 2741, -1000, 2672, 2734, 2672, 1019, 1019, 2561, -1000,
	2133, 2540, -1000, 2525, 2500, 10729, -1000, 2558, 4506, 1250,
	-55, -178, 132, 132, -1000, -1000, -1000, -1000, 132, 132,
	132, 132, -1000, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 764, -87, -266, -88, -268, -1000, 2556,
	1314, -1000, -1000, -1000, -1000, -1000, 1455, 1300, 548, 548,
	2363, 2362, -1000, 848, 2361, 1054, 46727, 2356, -282, -1000,
	-1000, 2354, -1000, -1000, 46727, 2352, -1000, 618, 46727, 46727,
	2344, 2341, 1121, 49773, 2546, 3275, 16963, 3270, 2176, -1000,
	-1000, -1000, 27507, 579, -1000, -1000, -1000, 719, 365, 2052,
	560, -1000, 46727, 533, 3177, 1755, 2334, 46727, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3223, -1000, 892, 451, 33707,
	14473, -1000, 393, 46727, -1000, 16963, 16963, 393, 489, 1779,
	-1000, 761, 1180, 139, 34947, 46727, -1000, 34327, 2545, -1000,
	1272, 3388, -1000, 1901, 1901, -331, 3388, 3388, 1705, -1000,
	-1000, 489, -1000, 393, -1000, 1094, 18203, 571, 512, 497,
	-1000, 699, -1000, -1000, 757, 3195, 49773, -1000, 46727, -1000,
	46727, -1000, 46727, 46727, 818, 10729, 3195, 46727, 847, -1000,
	-1000, 1097, 514, 457, 802, 802, 1297, -1000, 3243, -1000,
	-1000, 1290, -1000, -1000, -1000, -1000, 46727, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 25027, 25027, 3306, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2333, 2332, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46727, 1481, -1000, 1751, 2331, 2176, 27507, 1750, 1700,
	2328, 2327, 579, 2163, 1749, 872, 46727, -1000, 1261, 46727,
	46727, -1000, 1292, -1000, 1747, 3068, 3088, 3068, -1000, -1000,
	-1000, -1000, -1000, 2875, -1000, 2793, -1000, -1000, 1292, -1000,
	-1000, -1000, -1000, -1000, 986, -1000, 3326, 1005, 1005, 1005,
	2544, -1000, -1000, -1000, -1000, 1288, 2541, -1000, -1000, -1000,
	3436, -1000, -1000, -1000, -1000, -1000, -1000, 16343, 3217, 3382,
	3373, 36187, 3382, -1000, -317, 1802, -1000, 2101, 193, 1799,
	46727, -1000, -1000, -1000, 2539, 2538, -215, 198, 3368, 3367,
	1039, -1000, 2536, 1286, -210, -1000, -1000, 1274, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -210, -1000, 1274, -1000, 164,
	-1000, -1000, 3188, -1000, -1000, 2187, -1000, 243, -1000, -1000,
	-1000, -1000, -1000, -1000, 223, -1000, 46727, -1000, 1281, 123,
	-1000, 1901, -1000, -1000, -1000, -1000, -1000, 4788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10729,
	-1000, -1000, -1000, 2462, -1000, -1000, 10729, 2523, 2322, 2519,
	2319, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3399, -1000, 3362,
	1470, 2518, 2517, 1459, 2515, 2514, -1000, 10729, 2501, 1455,
	958, 2317, 958, -1000, -1000, 441, 26887, 46727, 3394, -1000,
	46727, 2316, -1000, -1000, 1971, 614, 688, -1000, -1000, -1000,
	-1000, 907, 393, 2499, 1278, -1000, -1000, -1000, -1000, 393,
	-1000, 2313, 244, -1000, -1000, -1000, -1000, 2312, 2305, 2045,
	-1000, -1000, 2025, 1564, 262, -1000, -1000, -1000, -1000, -1000,
	-1000, 2167, 46727, 35567, 2174, 1745, -333, -1000, 2728, -1000,
	1683, 1683, 1683, 46727, 1419, -1000, 1683, 1683, 2497, -1000,
	-1000, 2495, 2494, -127, 778, 1716, 1707, -1000, 2043, 26267,
	34947, 34327, 1218, -1000, 1431, -1000, -1000, -1000, -1000, -1000,
	-1000, 3388, 778, -1000, 567, 2028, 12598, 2727, 12598, 2722,
	591, 2721, 1415, -1000, 46727, -1000, -1000, 46727, 3682, 2704,
	-1000, 2703, 3070, 538, 2702, 2695, 46727, 2431, -1000, 3195,
	46727, 760, 3216, -1000, -1000, -1000, 417, -1000, -1000, 612,
	-1000, 46727, -1000, 46727, -1000, 1572, -1000, 25027, -1000, -1000,
	1404, -1000, 2303, 2302, -1000, -1000, 244, 2300, 5730, -1000,
	-1000, -1000, 3177, 2299, 2167, 46727, -1000, 46727, 1261, 1261,
	3399, 46727, 8231, -1000, -1000, 10729, 2693, -1000, 10729, -1000,
	-1000, -1000, -1000, -1000, 2692, 3207, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2750, -1000, 10729, 10729, -1000, -1000, 800,
	13853, -246, 350, -1000, -1000, -1000, -217, 2296, -1000, -1000,
	3361, 2293, 2204, 46727, -1000, -1000, 1274, 1274, -215, -1000,
	-1000, 1272, -1000, -1000, 1029, 675, -1000, 2488, 2422, -1000,
	2407, 132, -1000, 132, -1000, 270, 10729, -1000, 2286, -1000,
	-1000, -1000, 2284, -1000, -1000, 2398, -1000, 2486, -1000, 2277,
	-1000, -1000, 46727, -1000, 844, 1033, 2270, -335, 2268, 1971,
	1971, 46727, 49773, -139, -127, 16963, -139, -1000, -1000, 381,
	-1000, -1000, 394, -1000, -1000, 2024, 630, -1000, -1000, 2267,
	634, -1000, 1261, -1000, 1738, 1919, 2227, 31847, 25027, 25647,
	2262, -1000, -1000, 33707, 2750, 2750, 49918, 311, 50137, -1000,
	2691, 1072, 1702, -1000, 2026, -1000, 2002, -1000, 3388, 1218,
	138, -1000, -1000, 1622, -1000, 1072, 2205, 3360, -1000, 4219,
	46727, 4062, 46727, 2690, 1732, 12598, -1000, 757, 2490, -1000,
	-1000, 3682, -1000, -1000, 1924, 12598, -1000, -1000, 2259, 25647,
	897, 1730, 1724, 937, 2683, -1000, 628, 3424, -1000, -1000,
	-1000, 936, 2676, -1000, 1894, 1892, -1000, 46727, -1000, 31847,
	31847, 816, 816, 31847, 31847, 2673, 802, -1000, -1000, 12598,
	-1000, -1000, 1683, -1000, -1000, -1000, 1683, 1571, -1000, -1000,
	-1000, -1000, -1000, -1000, 2174, -1000, -1000, 1230, -1000, 3338,
	-1000, -1000, 1901, 46727, 1901, 33087, -1000, 3358, 3356, -1000,
	1901, 1119, -1000, -317, 46727, 46727, -223, 1993, -1000, 2258,
	186, -1000, -1000, 1181, -217, -231, 131, 25027, 1722, -1000,
	-1000, -1000, -1000, -1000, 2485, -1000, 622, -1000, -1000, -1000,
	1119, 2483, 2481, -1000, -1000, -1000, -1000, 430, 46727, -1000,
	2218, -1000, 2247, 2246, 604, -116, -1000, -1000, 459, -1000,
	-1000, -1000, 605, 2188, -1000, -1000, 384, -1000, -1000, -1000,
	2167, 2245, -1000, -1000, 122, -1000, 1712, 1389, -1000, 2672,
	10729, -1000, -1000, -1000, -1000, -1000, -1000, 756, -1000, 393,
	50076, -1000, 1064, -1000, 1029, 756, 30607, 687, 319, -1000,
	1989, -1000, -1000, 3399, -1000, 683, -1000, 574, -1000, 1382,
	-1000, 1377, 32467, 1984, 4036, -1000, 49979, 894, -1000, -1000,
	4536, -1000, -1000, -1000, -1000, -1000, -1000, 2243, 2239, -1000,
	-1000, -1000, -1000, -1000, 1983, 2671, 57, 3302, 2236, -1000,
	-1000, 2668, 1368, 1356, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1329, 1320, 31847, -1000, -1000, 4536, 1972,
	25027, 1683, -1000, -1000, 1301, 1289, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2667, -1000, -1000, 3355, -223, -234, 2235,
	130, 200, -1000, 2229, -1000, -1000, 635, -211, 151, 137,
	129, -1000, -1000, -1000, 10729, -1000, -1000, 46727, 836, 116,
	-1000, 1692, -1000, -1000, 1971, 46727, 626, -1000, -1000, -1000,
	-1000, 209, -1000, -1000, -1000, -1000, -1000, -1000, 2227, 2226,
	-1000, 31847, 3243, 2285, 552, 3354, -1000, 50137, -1000, 1683,
	-1000, 552, 1285, -1000, 1683, 1683, -1000, 502, -1000, 1676,
	-1000, 1969, -1000, 3338, -1000, 500, -1000, 554, -1000, -1000,
	-1000, 1275, -1000, -1000, -1000, 49979, 568, -1000, 752, 2661,
	-1000, -1000, 2479, 10729, 2650, 1683, 2412, -107, 31847, 3069,
	2981, 2909, 2871, 1266, -1000, -1000, 25027, -1000, -1000, 31227,
	46727, 2204, -1000, -1000, 2219, -1000, 833, 191, 200, -1000,
	3353, 183, 3347, 3346, 1092, 1882, -1000, 153, 149, 145,
	-1000, -1000, -1000, -1000, -1000, 427, -1000, 2218, 2217, 2212,
	576, -1000, 320, -1000, -1000, -1000, 357, -1000, -1000, 3243,
	-1000, 3345, 584, -1000, 25027, -1000, -1000, 30607, 2750, 2750,
	-1000, -1000, 1964, -1000, -1000, -1000, -1000, 1952, -1000, -1000,
	-1000, 1233, -1000, 46727, 948, 7608, -1000, 2230, -1000, 46727,
	-1000, 3085, -1000, 295, 1208, 357, 816, 357, 816, 357,
	816, 357, 816, 314, -1000, -1000, -1000, 1199, -1000, -1000,
	-1000, 2357, 1947, 198, 177, 3344, -1000, 2204, 3343, 2204,
	2204, -1000, 159, 635, -1000, -1000, -1000, 46727, -1000, -1000,
	-1000, 2211, -1000, -1000, -1000, -1000, 1683, 1683, 2210, 2208,
	477, -1000, -1000, -1000, 29987, 571, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 568, 50137, -1000, 7608, 1198, -1000, 1901,
	-1000, 802, -1000, -1000, 3084, 2980, 3393, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46727, 3296, 24407,
	174, -1000, -1000, -1000, 2207, -1000, 2204, -1000, -1000, 1682,
	-1000, -1000, -264, 1933, 1930, -1000, -1000, 46727, -1000, 46727,
	567, -1000, 50137, 1191, -1000, 7608, -1000, -1000, 3420, -1000,
	3416, 913, 913, 357, 357, 357, 357, -1000, -1000, 46727,
	-1000, 1173, -1000, -1000, -1000, 1428, -1000, -1000, -1000, -1000,
	2198, -1000, -1000, 2185, -1000, -1000, -1000, 1169, 2205, -1000,
	-1000, -1000, -1000, -1000, 1985, 638, -1000, 1077, -1000, 1651,
	-1000, 29367, 46727, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46727, 6985, -1000, 1082, -1000, -1000, 1901, 46727, -1000,
}

var yyPgo = [...]int{
	0, 176, 3452, 249, 185, 4008, 137, 262, 243, 241,
	259, 4007, 4006, 4005, 4004, 3225, 3210, 4003, 4002, 4001,
	4000, 3997, 3996, 3995, 3994, 3993, 3992, 3991, 3990, 3988,
	3987, 3986, 3985, 3984, 3983, 3977, 3974, 3973, 3972, 3971,
	3970, 3969, 3968, 3966, 3965, 3964, 3963, 256, 3961, 3960,
	3959, 3957, 3955, 3954, 3951, 3950, 3947, 3941, 3940, 3936,
	3935, 3933, 3932, 3930, 3928, 3926, 3925, 3924, 3923, 3917,
	3916, 3914, 3912, 3909, 3908, 3907, 3906, 3904, 3903, 3899,
	3898, 3897, 252, 3896, 3895, 228, 3892, 3207, 3891, 3887,
	3886, 3885, 3884, 3883, 3882, 247, 3881, 3880, 3879, 3872,
	3867, 3866, 3865, 3861, 3860, 3859, 3857, 3856, 245, 3855,
	3852, 3851, 3850, 260, 3849, 224, 3848, 180, 139, 3847,
	3846, 3845, 3843, 3842, 3841, 3840, 3839, 3837, 3836, 3832,
	3831, 3828, 248, 227, 78, 3827, 52, 3825, 3816, 222,
	3812, 156, 3811, 153, 3810, 3809, 3807, 3806, 3805, 3804,
	3802, 3801, 3800, 3799, 3796, 3790, 3789, 3788, 3787, 3783,
	3781, 3778, 3777, 3776, 3773, 3772, 3771, 58, 3770, 264,
	3768, 83, 3767, 178, 3766, 66, 3765, 96, 138, 258,
	2010, 278, 257, 194, 187, 101, 3764, 272, 3763, 160,
	244, 158, 29, 3761, 147, 3760, 265, 51, 45, 269,
	152, 59, 164, 134, 3759, 217, 98, 112, 3756, 3751,
	151, 3749, 238, 193, 3748, 109, 3747, 3746, 3745, 3744,
	3743, 205, 195, 3742, 3741, 140, 3739, 3738, 75, 135,
	3737, 86, 130, 173, 124, 3735, 1615, 127, 92, 3733,
	129, 108, 3732, 88, 3730, 3729, 3728, 3727, 191, 3726,
	3721, 143, 72, 3720, 3718, 3717, 76, 3712, 80, 3709,
	43, 3708, 67, 3705, 3704, 3703, 3702, 3701, 3698, 3697,
	3696, 3695, 3693, 3691, 3689, 57, 3688, 3687, 7, 15,
	14, 3686, 30, 3685, 174, 3684, 3683, 3681, 3680, 3679,
	99, 97, 3678, 95, 171, 3676, 8, 26, 79, 3673,
	3672, 230, 182, 105, 161, 3670, 277, 3669, 3668, 3667,
	163, 3665, 630, 3664, 3662, 3659, 3658, 3656, 3653, 23,
	3650, 1, 220, 47, 3648, 142, 150, 3647, 41, 31,
	3646, 49, 114, 196, 136, 104, 3645, 3644, 3643, 148,
	203, 121, 27, 0, 102, 231, 166, 3642, 3640, 3639,
	266, 3638, 239, 210, 172, 283, 270, 285, 3635, 3633,
	71, 3632, 169, 34, 55, 144, 64, 24, 229, 3631,
	438, 9, 213, 3630, 208, 3629, 207, 16, 116, 157,
	3627, 3626, 36, 271, 3624, 3622, 3621, 131, 3620, 3619,
	184, 77, 3617, 3614, 3613, 3612, 37, 3610, 40, 13,
	3608, 120, 3607, 255, 3606, 209, 145, 189, 188, 159,
	233, 226, 87, 84, 3605, 1762, 154, 107, 22, 3604,
	232, 3602, 177, 126, 3599, 117, 3598, 240, 268, 212,
	3597, 192, 10, 50, 38, 32, 44, 11, 261, 202,
	3596, 3595, 19, 54, 3594, 56, 3593, 18, 3592, 3589,
	42, 3588, 82, 5, 3587, 3584, 17, 20, 3583, 39,
	204, 175, 123, 100, 61, 3581, 3580, 53, 141, 3579,
	179, 183, 168, 3578, 85, 3575, 3573, 3571, 3570, 744,
	3569, 251, 3568, 3567, 3564, 3562, 3556, 3552, 3551, 3550,
	221, 3549, 128, 48, 3548, 3547, 3546, 3545, 90, 155,
	3544, 3542, 3541, 3540, 33, 146, 3539, 12, 3538, 25,
	21, 35, 3537, 106, 3536, 3, 201, 3534, 3530, 4,
	3528, 3526, 2, 3525, 3524, 132, 3523, 103, 28, 170,
	110, 3520, 3519, 94, 211, 149, 3518, 3517, 113, 237,
	206, 3516, 81, 234, 263, 3515, 215, 3514, 3511, 3510,
	3509, 3508, 3507, 1160, 3506, 3505, 235, 74, 89, 3504,
	246, 125, 3503, 3502, 93, 167, 119, 115, 65, 91,
	3500, 118, 200, 3499, 199, 3498, 254, 3497, 3496, 111,
	3495, 3494, 3492, 3489, 197, 3488, 3487, 198, 242, 3478,
	3477, 267, 3476, 3473, 3472, 3471, 3470, 3469, 3465, 3463,
	3457, 3456, 253, 368, 3454,
}

//line mysql_sql.y:12460
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 597, 600, 600, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 123,
	123, 334, 334, 335, 335, 125, 330, 330, 329, 329,
	126, 127, 128, 576, 576, 129, 130, 159, 575, 575,
	161, 161, 161, 161, 161, 450, 124, 124, 124, 124,
	124, 124, 124, 165, 165, 165, 165, 165, 122, 582,
	582, 582, 583, 583, 119, 148, 147, 150, 150, 149,
	149, 146, 146, 142, 145, 145, 144, 144, 143, 138,
	140, 140, 139, 141, 141, 120, 108, 121, 524, 524,
	523, 523, 522, 522, 475, 475, 476, 476, 321, 321,
	321, 521, 521, 521, 520, 520, 519, 519, 518, 518,
	516, 516, 517, 515, 514, 514, 514, 512, 512, 512,
	508, 508, 510, 509, 509, 511, 503, 503, 506, 506,
	504, 504, 504, 504, 507, 502, 502, 502, 501, 501,
	107, 107, 107, 417, 417, 106, 106, 431, 431, 431,
	431, 431, 429, 429, 429, 429, 429, 429, 428, 428,
	427, 427, 432, 432, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 96, 96, 96, 96, 96,
	96, 102, 101, 101, 101, 588, 588, 587, 587, 589,
	589, 589, 589, 590, 590, 99, 99, 99, 100, 426,
	426, 426, 97, 98, 98, 416, 416, 421, 421, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 425, 425, 425, 423, 423, 422, 422, 424,
	424, 90, 90, 90, 93, 92, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 91, 91, 91, 91, 91,
	91, 86, 86, 86, 86, 86, 85, 85, 87, 87,
	413, 413, 412, 103, 103, 104, 585, 585, 584, 586,
	586, 586, 586, 105, 111, 111, 111, 111, 111, 111,
	111, 111, 110, 110, 113, 113, 112, 114, 95, 95,
	95, 95, 95, 95, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 549, 549, 549,
	551, 551, 348, 349, 601, 351, 347, 347, 347, 545,
	545, 546, 547, 548, 548, 548, 109, 14, 211, 211,
	449, 449, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 84, 89, 89, 283, 283, 288, 288, 164,
	289, 289, 289, 294, 294, 295, 295, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 270,
	270, 270, 265, 265, 265, 265, 266, 266, 267, 267,
	268, 268, 268, 268, 269, 269, 340, 340, 290, 290,
	290, 292, 292, 291, 287, 285, 285, 285, 285, 285,
	285, 285, 286, 286, 286, 286, 293, 293, 82, 88,
	88, 88, 88, 563, 563, 83, 574, 574, 479, 479,
	362, 362, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 484, 485,
	358, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 79, 80,
	81, 54, 57, 58, 163, 53, 53, 53, 402, 402,
	52, 602, 602, 333, 333, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 497, 497, 604, 604, 604, 74,
	75, 478, 478, 478, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 154, 59, 155, 155, 355,
	355, 355, 357, 357, 353, 603, 603, 445, 445, 356,
	356, 48, 48, 48, 48, 77, 354, 354, 332, 352,
	352, 352, 12, 12, 10, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 410, 410, 407, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 184, 184, 237,
	237, 557, 557, 553, 553, 554, 554, 554, 555, 555,
	556, 556, 115, 491, 491, 491, 491, 491, 491, 8,
	8, 206, 206, 490, 490, 490, 490, 490, 490, 414,
	414, 414, 534, 534, 534, 535, 205, 205, 200, 200,
	492, 492, 379, 536, 536, 500, 500, 499, 499, 498,
	498, 203, 203, 204, 204, 187, 187, 133, 133, 505,
	505, 505, 505, 513, 513, 474, 474, 275, 275, 323,
	323, 324, 324, 177, 177, 178, 178, 178, 178, 178,
	178, 591, 591, 592, 593, 594, 594, 595, 595, 595,
	596, 596, 596, 596, 596, 542, 542, 544, 544, 543,
	202, 202, 198, 198, 199, 199, 199, 197, 197, 196,
	195, 195, 194, 192, 192, 192, 193, 193, 193, 210,
	210, 180, 180, 180, 179, 179, 179, 179, 179, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 181, 181, 550, 550, 550, 480, 480, 480, 487,
	487, 303, 303, 304, 304, 302, 302, 182, 182, 183,
	183, 183, 183, 301, 301, 300, 185, 185, 191, 190,
	190, 186, 186, 186, 186, 311, 311, 310, 310, 310,
	310, 118, 131, 131, 132, 209, 209, 309, 308, 308,
	308, 308, 208, 208, 207, 207, 201, 201, 189, 189,
	189, 189, 307, 188, 305, 581, 581, 580, 580, 579,
	577, 577, 577, 578, 578, 578, 578, 526, 526, 526,
	526, 526, 341, 341, 341, 346, 346, 344, 344, 344,
	344, 344, 350, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 39, 220, 221, 40, 222,
	222, 223, 223, 224, 224, 225, 226, 227, 227, 227,
	227, 38, 212, 212, 213, 213, 214, 214, 215, 216,
	216, 216, 219, 217, 218, 218, 599, 599, 598, 37,
	37, 30, 168, 168, 169, 169, 169, 171, 171, 271,
	271, 271, 170, 170, 172, 172, 172, 558, 560, 560,
	562, 561, 561, 561, 564, 564, 564, 564, 564, 565,
	565, 565, 565, 566, 566, 31, 151, 151, 175, 175,
	156, 569, 569, 569, 568, 568, 570, 570, 571, 571,
	327, 327, 328, 328, 166, 167, 167, 158, 153, 174,
	174, 174, 174, 174, 176, 176, 239, 239, 152, 157,
	160, 162, 559, 567, 567, 567, 411, 411, 408, 409,
	409, 406, 405, 405, 405, 573, 573, 572, 572, 572,
	342, 342, 32, 401, 401, 403, 404, 404, 404, 395,
	395, 395, 395, 36, 399, 399, 400, 400, 400, 400,
	400, 400, 400, 396, 396, 398, 398, 394, 394, 394,
	394, 394, 394, 394, 35, 173, 173, 393, 393, 390,
	390, 388, 388, 389, 389, 387, 387, 387, 391, 391,
	43, 78, 44, 45, 46, 42, 392, 392, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 135, 134,
	134, 134, 134, 134, 137, 137, 326, 326, 325, 325,
	136, 272, 272, 41, 250, 250, 466, 466, 461, 461,
	461, 461, 461, 482, 482, 482, 462, 462, 462, 463,
	463, 463, 465, 465, 465, 464, 464, 464, 464, 464,
	481, 481, 483, 483, 483, 433, 433, 434, 434, 434,
	437, 437, 453, 453, 454, 454, 452, 452, 459, 459,
	458, 458, 457, 457, 456, 456, 455, 455, 455, 455,
	448, 448, 447, 447, 435, 435, 435, 435, 435, 436,
	436, 436, 446, 446, 451, 451, 299, 299, 298, 298,
	258, 258, 259, 259, 297, 297, 256, 256, 257, 257,
	257, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 532, 532, 533, 261,
	261, 273, 273, 273, 273, 273, 273, 260, 260, 262,
	262, 238, 238, 236, 236, 228, 228, 228, 228, 228,
	229, 229, 230, 230, 231, 231, 231, 235, 235, 234,
	234, 234, 234, 232, 232, 233, 233, 233, 233, 233,
	233, 419, 419, 529, 529, 530, 530, 525, 525, 525,
	528, 528, 528, 528, 528, 528, 528, 531, 531, 531,
	527, 527, 240, 320, 320, 320, 343, 343, 343, 343,
	345, 319, 319, 319, 255, 255, 254, 254, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	418, 418, 359, 359, 360, 360, 282, 281, 281, 281,
	281, 281, 279, 280, 278, 278, 278, 278, 278, 277,
	277, 276, 276, 276, 397, 397, 274, 274, 264, 264,
	264, 263, 263, 263, 460, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 317, 317, 317, 318, 318, 318,
	318, 318, 318, 318, 318, 369, 369, 375, 375, 541,
	541, 540, 241, 241, 241, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 251, 251, 251, 442, 442, 442,
	442, 443, 443, 443, 443, 444, 444, 444, 440, 440,
	441, 441, 380, 381, 381, 488, 488, 489, 489, 438,
	438, 439, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 496, 496, 496, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 552, 552, 552, 537, 537, 537, 538,
	538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
	538, 539, 539, 539, 539, 539, 539, 539, 539, 539,
	539, 539, 539, 539, 539, 539, 539, 539, 315, 315,
	315, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 382,
	382, 383, 383, 493, 493, 493, 493, 493, 493, 494,
	494, 495, 495, 495, 495, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 367, 312, 312, 312, 384, 376,
	376, 377, 377, 378, 378, 370, 370, 370, 370, 370,
	370, 371, 371, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 372, 372, 374, 374, 386,
	386, 386, 385, 385, 385, 385, 385, 385, 385, 253,
	253, 253, 253, 364, 364, 364, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 243, 243,
	243, 243, 247, 247, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 248, 248,
	248, 248, 248, 246, 246, 246, 246, 246, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 116, 117, 117,
	245, 322, 322, 467, 467, 470, 470, 468, 468, 469,
	471, 471, 471, 472, 472, 472, 473, 473, 473, 477,
	477, 331, 331, 331, 339, 339, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 11, 13, 5, 7, 9, 8, 6, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 11, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 3, 0, 3, 3,
	0, 1, 3, 0, 1, 3, 0, 2, 1, 2,
	3, 4, 3, 3, 1, 0, 1, 1, 0, 1,
	8, 5, 7, 0, 3, 8, 5, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 1, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 3, 4, 4, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 5, 3, 4, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 1, 3, 1, 6, 7,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 6, 3, 3, 1, 1, 7, 7,
	7, 8, 8, 0, 4, 7, 0, 3, 0, 2,
	0, 1, 1, 1, 1, 4, 2, 2, 3, 3,
	4, 5, 3, 4, 4, 2, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 4, 3, 3, 3, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 5, 5, 6, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 3,
	2, 3, 1, 4, 3, 0, 1, 1, 2, 5,
	2, 2, 2, 0, 2, 3, 3, 0, 1, 3,
	1, 3, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 3, 3, 4, 3, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 10, 2, 2,
	8, 0, 3, 3, 0, 3, 0, 3, 0, 5,
	1, 3, 0, 3, 3, 0, 2, 9, 8, 0,
	2, 2, 3, 3, 0, 2, 0, 2, 4, 4,
	4, 4, 1, 0, 2, 2, 1, 3, 2, 1,
	3, 2, 1, 3, 2, 0, 1, 3, 4, 3,
	1, 1, 4, 1, 3, 1, 1, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 3, 2, 2,
	3, 1, 1, 1, 3, 3, 4, 0, 2, 2,
	2, 2, 2, 2, 6, 0, 4, 1, 1, 0,
	3, 0, 1, 1, 2, 4, 4, 4, 0, 1,
	8, 2, 4, 4, 4, 9, 0, 2, 11, 9,
	11, 8, 6, 9, 7, 10, 7, 6, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	6, 0, 2, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 4, 4, 4, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -597, -600, -2, -5, 624, -1, -4, -117, -90,
	-7, -14, -119, -120, -8, -115, -9, -10, -12, -94,
	-110, -112, -114, -113, -47, -11, -109, -85, -86, -96,
	-103, -106, -107, -108, -121, -116, -118, -177, -122, -123,
	-124, -165, -127, -129, -130, 614, -91, -92, -93, -33,
	-32, -31, -30, -151, -156, -159, -161, -125, 547, 620,
	450, 14, 499, -15, -16, -542, -17, 261, -347, -348,
	-349, -351, -601, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -154,
	-155, -77, -57, -78, -58, -163, -126, -79, -80, -81,
	-83, -82, -88, -84, -89, -153, -158, -13, -164, 236,
	-87, 76, -97, -98, -99, -100, -101, -102, -104, -105,
	374, 380, 437, 613, 61, -178, -180, 637, 638, 641,
	534, 537, 160, 161, 163, 164, -34, -35, -36, -37,
	-38, -39, -41, -40, -42, -43, -44, -45, -46, 232,
	16, 542, -18, -21, -19, -22, -20, -28, -29, -27,
	-24, -26, -152, -25, -157, -23, -160, -162, -128, 256,
	255, 38, 322, 323, 324, 378, 254, 233, 15, 31,
	42, 353, -179, 83, 535, 234, -181, 13, 643, -6,
	-3, -2, -138, -142, -146, -149, -150, -147, -148, -4,
	-117, 118, 246, 615, -343, 370, 616, 618, 617, 86,
	94, -336, -338, 450, 261, 374, 380, 613, 638, 641,
	534, 537, 549, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 561, 562, 563, 564, 574, 575, 565,
	566, 567, 568, 569, 570, 571, 572, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 502, 599, 600, 601, 602, 530, 557, 593, 594,
	595, 596, 351, 352, 539, 273, 297, 405, 303, 310,
	160, 179, 173, 202, 193, 535, 168, 277, 315, 278,
	93, 163, 485, 108, 462, 434, 166, 292, 294, 296,
	531, 532, 364, 299, 529, 298, 300, 302, 533, 279,
	354, 189, 184, 291, 275, 182, 280, 40, 281, 207,
	282, 283, 544, 458, 350, 464, 307, 52, 432, 183,
	459, 295, 461, 211, 215, 476, 477, 177, 178, 466,
	479, 206, 209, 210, 253, 347, 348, 43, 541, 265,
	480, 213, 205, 200, 488, 311, 309, 204, 176, 199,
	276, 65, 217, 216, 218, 428, 429, 430, 431, 284,
	285, 368, 475, 196, 185, 355, 169, 23, 483, 260,
	463, 381, 286, 304, 312, 212, 214, 267, 272, 543,
	436, 271, 308, 481, 181, 264, 293, 259, 484, 634,
	170, 383, 287, 164, 301, 478, 636, 487, 64, 396,
	175, 167, 631, 250, 161, 269, 274, 635, 288, 289,
	290, 528, 314, 313, 305, 536, 197, 266, 203, 187,
	174, 198, 162, 268, 486, 397, 611, 353, 415, 195,
	192, 270, 243, 482, 465, 165, 419, 398, 190, 316,
	606, 607, 608, 369, 346, 317, 318, 188, 257, 456,
	457, 321, 425, 337, 399, 435, 406, 400, 224, 225,
	325, 468, 470, 208, 609, 326, 327, 328, 460, 329,
	330, 331, 332, 373, 56, 58, 95, 98, 97, 639,
	640, 63, 29, 359, 362, 394, 401, 339, 612, 540,
	336, 340, 341, 363, 25, 417, 385, 421, 420, 48,
	49, 50, 53, 54, 55, 57, 59, 60, 51, 527,
	378, 391, 489, 45, 47, 388, 27, 365, 416, 438,
	335, 418, 449, 46, 447, 448, 469, 26, 367, 366,
	62, 44, 424, 426, 427, 319, 333, 376, 621, 490,
	371, 387, 390, 372, 338, 361, 392, 67, 66, 384,
	622, 379, 377, 334, 545, 546, 342, 573, 356, 433,
	524, 523, 522, 521, 520, 519, 518, 517, 322, 323,
	324, 402, 403, 404, 414, 407, 408, 409, 410, 411,
	412, 413, 452, 453, 623, 471, 473, 474, 472, 238,
	642, 357, 358, 241, 625, 626, 96, 627, 629, 628,
	28, 630, -424, -422, -343, 535, 613, 380, 534, 537,
	374, 353, 638, 641, 378, 261, 322, 323, 324, 450,
	351, -222, -343, 642, -187, 245, 39, -236, -343, -187,
	-87, -16, -15, -179, -180, -236, 240, -352, 24, 432,
	-95, 433, 236, 83, 77, -343, -9, -108, -8, -115,
	-85, -177, 437, -350, -343, 322, 322, -350, 240, -345,
	271, 413, -343, -479, 246, -428, -401, 272, -427, -403,
	-430, -404, 32, 232, 234, 233, 547, 268, 16, 378,
	242, 14, 13, 379, 254, 25, 26, 28, 15, 380,
	382, 29, 383, 386, 387, 388, 42, 391, 392, 261,
	86, 94, 89, 279, -221, -343, -378, -370, 115, -373,
	-365, -366, -368, -321, -516, -363, 83, 142, 143, 150,
	116, 644, -367, -460, 36, 118, 553, 557, 593, 500,
	-313, -314, -315, -316, -317, -318, -343, -517, -515, 89,
	99, 101, 105, 106, 104, 102, 154, 186, 103, 90,
	155, -180, 86, -537, 563, -337, 586, 599, 600, 601,
	602, 585, 61, -486, -495, 239, -493, 153, 191, 257,
	187, 14, 148, 425, 188, 594, 595, 596, 560, 582,
	502, 564, 574, 589, 555, 556, 558, 550, 551, 552,
	554, 565, 567, 581, -496, 577, 587, 588, 573, 597,
	598, 590, 591, 592, 629, 88, 87, 580, 579, 566,
	561, 562, 568, 549, 559, 569, 570, 578, 583, 584,
	362, 108, 363, 364, 492, 354, 365, 246, 432, 70,
	366, 367, 368, 369, 370, 499, 371, 71, 372, 361,
	261, 415, 373, 190, 208, 504, 503, 505, 496, 493,
	491, 494, 495, 497, 498, 571, 572, 576, -131, -132,
	604, -591, -306, -592, 6, 7, 8, 9, -593, 155,
	-582, 434, 543, 89, 315, 351, 17, 492, 632, 533,
	632, 533, 165, 162, -415, 165, 114, 170, 169, -415,
	632, 167, 631, 325, 267, -392, -168, 351, 415, 329,
	95, 271, -395, -393, 531, -481, 319, 315, 291, 241,
	111, -169, 251, 250, 109, 492, 239, 389, 310, 56,
	58, -553, -554, 229, 230, 231, -544, 525, -543, -343,
	632, 633, 364, 97, 98, 631, 27, 240, 375, 267,
	470, 468, 469, 471, 472, 473, 474, -65, -497, -478,
	465, 464, -356, 457, 463, 455, 467, 458, 352, 331,
	547, 330, 232, 625, 532, 526, -331, 399, 435, 489,
	490, 376, 436, 476, 478, 459, 108, 194, 191, 241,
	243, 240, 631, 351, 492, 415, 95, 329, -553, 633,
	162, 476, 478, 271, 413, 41, -421, 425, -420, -422,
	477, 488, 87, 88, 475, -331, 108, 456, 456, -591,
	-306, -178, -180, -118, -542, 533, 632, 241, 351, 415,
	271, 242, 240, 528, 531, 243, 492, 239, 322, 375,
	267, 329, 95, 167, 631, -480, -550, 32, -487, 226,
	227, 228, 33, 34, -1, 122, 643, -370, -370, -6,
	646, -6, -370, -343, -343, 633, 157, -243, -247, -244,
	-246, -245, -249, -248, 191, 192, 153, 195, 201, 197,
	198, 199, 200, 202, 203, 204, 205, 206, 209, 210,
	207, 31, 208, 257, 187, 188, 189, 190, 211, 173,
	193, 540, 219, 174, 220, 175, 221, 176, 222, 177,
	178, 223, 179, 182, 183, 184, 185, 181, 156, -211,
	89, 32, 83, 156, 89, -203, 263, -187, -236, -228,
	156, 644, -203, -591, -196, -197, 11, -236, -319, -343,
	434, 125, -95, 77, -95, 433, 77, -545, -546, -547,
	-549, 236, 433, 432, -113, 156, 279, 17, -350, -350,
	81, -236, -403, 271, -428, -401, 36, 80, 157, 244,
	157, 80, 83, 376, 351, 415, 377, 492, 240, 389,
	243, 271, 390, 351, 415, 240, 243, 492, 271, 351,
	240, 243, 415, 271, 390, 351, 455, 456, 243, 27,
	381, 384, 385, 456, -501, 488, 157, 114, 111, 112,
	113, -370, 132, -385, 125, 126, 127, 128, 129, 130,
	131, 139, 138, 149, 142, 143, 144, 145, 146, 147,
	148, 140, 141, 135, 115, 133, 137, 134, 117, 152,
	-180, -370, -378, 61, -368, -368, -368, -368, -343, -460,
	-375, -370, 83, 83, 83, 83, 156, 102, 89, -370,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, -494, 83, 83, -382, -383, 83, 83, -363,
	-319, 83, 89, 89, 83, 83, 83, 89, 83, 83,
	83, -383, -383, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, -197, 157,
	-196, 83, -196, -197, -181, -180, 32, 33, 32, 33,
	32, 33, 32, 33, -594, 622, 83, 99, 639, 224,
	17, -343, 631, -343, 89, 536, 89, 536, 481, 542,
	168, 169, 170, -390, 246, -390, -390, -220, -343, -222,
	375, 243, 528, 243, -169, -390, -390, -390, -390, -390,
	242, -390, 24, 240, 240, 240, 240, -390, 499, 125,
	125, 59, -555, 172, 157, -544, -202, 83, 89, 634,
	635, 636, -355, 133, 137, -355, -302, 18, -302, 24,
	269, 269, 269, -355, 309, -602, -603, 17, 135, -353,
	-603, -353, -353, -355, -604, 242, 466, 43, 270, 269,
	-198, -199, 22, -198, 460, 456, -445, 461, 462, -357,
	-603, -356, -355, -355, -356, -355, -355, -355, 32, 240,
	243, 492, 329, 626, -602, -602, 31, 31, -479, -479,
	-236, -479, -479, 526, -332, -343, -479, -479, -479, -556,
	245, 636, -588, -587, 479, -590, 481, 162, -422, 162,
	-422, -403, 271, 271, 157, 125, 24, -423, 125, 136,
	-422, -422, -423, -423, -260, 41, -342, 153, -343, 89,
	-260, 41, -585, -584, -236, -197, -181, -180, 84, 84,
	84, 536, 89, -479, -479, -479, -479, -479, -481, -479,
	-479, -479, -479, -479, -350, -212, -343, -222, 246, -479,
	-479, -479, -479, -182, -183, 144, -370, -343, -182, -3,
	-140, -139, 119, 120, 122, 616, 370, 615, 619, 613,
	-422, 41, -473, 397, 396, -467, -469, 83, -468, 83,
	-468, -468, -468, -468, -468, 83, 83, -470, 83, -470,
	-470, -467, -471, 83, -471, -472, 83, -472, -471, -343,
	-449, 542, -376, -378, -343, 39, -490, 61, -177, 83,
	31, 83, -203, -343, 188, 167, 630, -491, 61, -177,
	83, 31, -197, -133, 39, -199, 21, 156, 99, 89,
	-113, -95, 77, -113, 84, 157, -548, 105, 106, -551,
	206, 197, -343, -111, 89, -7, -8, -9, -10, -47,
	-85, -82, -177, 233, 534, 537, -518, -516, 83, 32,
	424, 80, 17, -429, 240, 492, 375, 267, 243, 351,
	-427, -410, -407, -405, -342, -403, -406, -405, -432, -319,
	456, -134, 439, 438, 321, -370, -370, -370, -370, -370,
	104, 115, 346, 105, 106, -365, -386, 32, 317, 318,
	-366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
	-366, -366, -374, -384, -460, 83, 135, 133, 137, 134,
	117, -368, -368, -366, -366, -262, -342, 153, 84, 157,
	-370, -541, -540, 119, -370, -370, -370, -370, -343, -538,
	-539, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 366, 361, 367, 365, 354, 373, 368, 369,
	190, 523, 524, 517, 518, 519, 520, 521, 522, -376,
	-376, -370, -538, -376, -312, 33, 32, -378, -378, -378,
	84, -370, -552, 344, 343, 345, -200, -343, -376, 84,
	84, 84, 99, -378, -378, -376, -366, -376, -376, -376,
	-376, -539, -312, -312, -312, -312, 144, -378, -378, -312,
	-312, -312, -312, 144, -312, -312, -312, -312, -312, -312,
	-312, -312, -312, -312, 84, 84, 84, 144, -378, -198,
	-132, -499, -498, -370, 41, -133, -199, -595, 623, 83,
	-319, -583, 89, 89, 644, 167, 631, 17, 492, -343,
	17, 240, -576, 32, 536, 99, 536, 99, 482, 483,
	166, 169, 168, 89, 115, -343, -343, 35, 83, -212,
	-390, -390, -390, -560, -343, 90, -411, -408, -405, -343,
	-343, -401, -343, -332, -236, -390, -390, -390, -390, -236,
	-271, 53, 54, 55, -405, -170, 56, 57, -556, -543,
	35, -201, -343, -576, -302, -368, -368, -370, -405, 271,
	-602, -355, -355, -333, -332, -357, -352, -357, -357, -302,
	-353, -355, -355, -370, -357, -353, -302, -343, 456, -302,
	-302, -445, -355, -354, -343, -354, -390, -332, -333, -333,
	-236, -236, -283, -288, -284, -289, 263, 237, 359, 360,
	235, 233, 11, 234, -296, 310, -391, 500, -266, -267,
	77, 42, -269, 261, 401, 394, 273, 277, 93, 278,
	434, 279, 242, 281, 282, 283, 298, 300, 253, 284,
	285, 286, 425, 287, 161, 299, 288, 289, 290, 377,
	-261, 6, 332, 41, 51, 52, 448, 447, 545, 542,
	274, -343, -560, -558, 31, -343, 31, -411, -343, -343,
	-190, -185, -189, -186, -191, -305, -307, -188, 83, -236,
	-180, -343, -422, 157, 480, 482, 483, -588, -423, -588,
	-423, 32, 424, -426, 424, 32, -401, -420, 476, 478,
	-416, 89, 425, -406, -425, 80, 153, -498, -423, -423,
	-425, -425, 152, 157, -586, 481, 482, 229, -198, 99,
	-576, -238, -236, -560, -410, -401, -343, -479, -238, -238,
	-238, -345, -345, 83, 156, 36, -343, -343, -343, -343,
	-301, 157, -300, 17, -344, -343, 35, 89, 156, -301,
	-141, -139, 121, -370, -6, 615, -370, -6, -6, -370,
	-6, -370, -477, 398, 99, 99, -322, 89, -322, 99,
	99, 99, 548, 84, 89, -414, 80, -492, -379, -536,
	604, -205, 84, -200, -534, -535, -200, -204, -343, -490,
	-228, 125, 125, 125, -492, -205, 84, -534, -198, 605,
	-133, -195, -194, -370, -343, 24, -113, -95, -546, 156,
	351, 157, -201, -429, -409, -406, -431, 144, -343, -417,
	157, 542, 647, 87, 244, -573, -572, 416, 84, 157,
	-502, 245, 499, 89, 644, 432, 224, 225, 104, 346,
	105, 106, -460, -378, -374, -368, -368, -366, -366, -372,
	258, -372, 114, -370, 645, -369, -540, 121, -370, 35,
	157, 35, 157, 81, 156, 84, 84, 17, 17, 84,
	-370, 84, 84, 84, 84, 17, 17, -370, 84, 156,
	84, 84, 84, 84, 81, 84, 157, 84, 84, 84,
	84, 157, -378, -378, -370, -378, 84, 84, 84, -370,
	-370, -370, -378, 84, -370, -370, -370, -370, -370, -370,
	-370, -370, -370, -370, -439, 451, -439, -439, 157, 157,
	157, 84, -133, 83, 99, 157, 640, -326, -325, 89,
	-343, -343, 167, 631, -343, 89, 631, -343, 89, 89,
	167, 170, 170, 169, 89, 36, 24, 308, 24, -221,
	-223, -224, -225, -226, -227, 135, 158, 159, 83, -236,
	-236, -236, -562, 402, -574, 157, 41, -572, 492, -166,
	321, -394, 81, -173, 17, 542, -236, -236, -236, -236,
	-250, 35, 17, -184, -237, -343, 83, 84, 157, -402,
	81, -343, -333, -302, -302, -357, -302, -302, 157, 23,
	-355, -357, -357, -228, -353, -228, 156, -228, -332, -466,
	35, -202, 157, 21, 263, -235, -340, -232, -234, 248,
	-360, -233, 251, -530, 249, 247, 109, 252, 306, 110,
	242, -340, -340, 248, -270, 244, 35, -340, -286, 242,
	349, 306, 249, 21, 263, -285, 242, 110, -343, 248,
	252, 249, 247, -339, 125, -331, 152, 244, 43, 377,
	-339, 546, 263, -339, -339, -339, -339, -339, -339, -339,
	280, 280, -339, -339, -339, -339, -339, -339, -339, -339,
	-339, -339, -339, 162, -339, -339, -339, -339, -339, -339,
	83, 275, 276, 308, -563, 402, 31, 357, 357, 358,
	-574, 31, -174, 351, 31, -308, -309, -310, -311, 68,
	72, 74, 78, 69, 70, 71, 75, 31, 157, -341,
	-346, 35, -343, 89, -341, -180, -185, -190, -341, 83,
	-423, -587, -589, 484, 481, 487, -425, -425, 244, 83,
	125, -425, -425, 41, -342, -584, 488, 482, -133, 157,
	80, -238, -213, -214, -215, -216, -243, -319, 192, 195,
	197, 198, 199, 200, 202, 203, 204, 205, 206, 209,
	210, 207, 208, 257, 187, 188, 189, 190, 211, 173,
	193, 540, 174, 175, 176, 177, 178, 179, 182, 183,
	184, 185, 181, -343, -222, -302, -183, -185, -343, 89,
	-343, 144, -302, 122, -6, 120, -145, -144, -143, 123,
	613, 619, 122, 122, 122, 84, 84, 84, 157, 84,
	84, 84, 157, 84, 157, 99, -505, 461, 40, 157,
	83, 84, 157, 61, 157, 125, 84, 157, -370, -343,
	89, -370, 84, 61, -133, 89, 157, -192, 37, 38,
	156, 434, -343, -516, 84, -431, 157, 244, 156, 156,
	-407, 380, -342, -409, 21, 542, -319, 39, -326, 125,
	644, -343, 84, -372, -372, 114, -368, -365, 84, 122,
	-370, 120, -241, -243, 396, 397, -370, -241, -242, -248,
	153, 191, 257, 190, 189, 187, 396, 397, -260, -343,
	-370, -370, 84, -370, -370, 17, -343, -260, -366, -370,
	-197, -197, 84, 84, -438, -439, -438, -438, 84, 84,
	84, 84, -438, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 83, 99, 101, 99, 101, -498, -596,
	63, 621, 62, 424, 104, 311, 157, 99, 89, 645,
	157, 125, 89, -343, -343, 17, 240, -343, 17, 89,
	170, 89, -575, 315, 351, -450, 99, 315, 351, 492,
	388, 84, 157, -319, -213, -202, 83, -202, -565, 463,
	404, 414, -339, -362, -361, 353, 42, -484, 425, 410,
	411, -408, 271, -332, -571, 96, 125, 80, 336, 340,
	341, 337, 338, 339, -388, -389, -387, -391, -558, 83,
	83, -177, 35, 133, -173, 83, 83, 35, -461, 326,
	-243, -236, -184, -343, 17, 157, -557, 156, -1, -343,
	-401, -355, -302, -370, -370, -302, -355, -355, -357, -343,
	-228, -461, -243, 35, -284, 237, 234, -435, 308, 309,
	-436, -451, 311, -453, 83, -240, -319, -233, -529, -530,
	-390, -343, 110, -529, 110, 83, -240, -319, -319, -287,
	-354, -319, -343, -343, -343, -343, -292, -291, -319, -294,
	32, -295, -343, -343, -343, -343, 110, -343, 110, -265,
	41, 48, 49, 50, -339, -339, 194, -268, 41, 424,
	426, 427, -294, 99, 99, 99, 99, 89, 89, 89,
	-339, -339, 99, 89, -346, 89, -531, 169, 45, 46,
	99, 99, 99, 99, 41, 89, -273, 41, 291, 295,
	292, 293, 294, 89, 99, 41, 99, 41, 99, 41,
	-343, 83, -532, -533, 89, -450, -565, -339, 357, -422,
	125, 125, -362, -570, 321, -176, 492, 32, -206, 237,
	234, -558, -413, -412, -319, -189, -189, -189, -189, 68,
	68, 68, 68, 73, 68, 73, 68, -310, -413, -191,
	-202, -346, 84, -581, -580, -579, -577, 76, 245, 77,
	-376, -425, 481, 485, 486, -409, -358, 89, -416, -210,
	24, -236, -236, -483, 301, 302, 84, 157, -243, -304,
	19, 156, -304, 118, -6, -141, -143, -370, -6, -370,
	615, 370, 616, 89, 99, 99, -513, 445, 440, 442,
	110, -379, -500, -499, 61, -177, -200, -492, -535, -498,
	-343, 645, 645, 645, 645, 61, -177, -492, -210, -505,
	-194, -193, 44, -343, 99, 17, -406, -401, 144, 144,
	-343, 381, -417, 89, 403, 89, 240, 645, 89, -326,
	-365, -370, 84, -251, 178, 177, -251, 35, 84, 84,
	-468, -468, -467, -470, -467, -251, -251, 84, 84, 24,
	84, 84, 84, -370, 84, 84, 157, -488, 501, -489,
	575, -438, -438, -438, -438, -438, -438, -438, -438, -438,
	-438, -438, -438, -438, -438, -438, -438, -381, -380, 263,
	446, 628, 628, 446, 628, 628, 84, 157, -538, 157,
	-334, 316, -334, -325, 89, 244, 89, 167, -343, 89,
	631, 89, -343, 89, 308, -343, -343, 89, 89, -225,
	-243, 84, 35, -229, -230, -231, -240, -232, -234, 35,
	-566, 93, -561, 89, -343, 90, -567, 93, 405, 155,
	355, 41, 406, 407, 422, 350, 99, 99, 412, -559,
	-343, -175, 240, 351, -569, 52, 125, 89, -236, -387,
	-331, 152, 282, 329, -299, -298, -343, 89, -229, -177,
	-236, -229, -229, -177, -462, 328, 21, 99, 143, -203,
	81, 156, -185, -237, -343, 144, 84, -302, -228, -302,
	-302, -355, -462, -177, -447, 312, 83, -445, 83, -445,
	110, 337, -454, -452, 263, -290, 45, 47, -243, -527,
	-343, -525, -527, -343, -525, -525, -390, -370, -290, -240,
	244, 31, 234, -293, 334, 335, 340, -418, 307, 115,
	-418, 157, -192, 157, -343, -260, -260, 31, 89, 89,
	-238, 84, 157, 125, 89, -566, -561, 125, -423, 89,
	89, -567, -571, 125, -239, 240, -332, 157, -206, -206,
	-302, 157, 125, -208, -207, 80, 81, -209, 80, -207,
	68, 68, -302, -579, -578, 24, -530, -530, -530, 84,
	84, 15, -215, 41, -303, 20, 21, 144, -303, 122,
	120, 122, 122, -343, 84, 84, -474, 606, -509, -511,
	440, 21, 21, 15, 245, 84, -492, -492, -513, 45,
	46, -401, -417, 425, -236, 157, 645, -241, -370, 84,
	-370, 84, 89, 84, 89, -197, 21, 84, 157, 84,
	84, 84, 157, 84, 84, -370, 84, -538, -335, 188,
	89, -335, 351, -344, -343, 17, -343, 89, -450, 308,
	308, 240, 238, -177, 84, 157, -177, 89, -564, 416,
	89, 89, 99, 41, 99, 155, 408, -485, -167, 93,
	-238, 32, -206, -568, 93, 125, 644, 83, -339, -339,
	-339, -343, 84, 157, -339, -339, 84, 84, 84, -258,
	542, -463, 262, 99, 143, 99, 143, 99, -341, -185,
	-343, -302, -557, 156, -302, -463, -437, 313, 99, -366,
	83, -366, 83, -446, 310, 83, 84, 157, -343, -319,
	-255, -254, -252, 104, 115, 41, 394, -253, 93, 152,
	296, 299, 298, 274, 297, -282, -359, 80, 400, 334,
	335, -391, 606, 530, 247, 109, 110, 382, -360, 83,
	83, 81, 316, 83, 83, -527, 84, -290, -319, 41,
	-293, 41, 347, 307, -291, -343, 152, -260, 84, -533,
	89, -564, 89, -425, -569, 89, -167, -238, -558, -197,
	-412, -498, -370, 83, -370, 83, 68, 11, 19, -363,
	-370, -378, 246, -6, 616, 370, -275, 607, 89, 21,
	89, -507, 89, -413, -474, -136, -272, -331, 279, 84,
	84, 84, -438, -438, -441, -440, -444, 446, 308, 454,
	-378, 89, 89, 84, 84, 89, -343, 244, 167, 89,
	644, 89, -450, -450, -343, -217, -243, -171, 542, -258,
	-231, -171, 21, 542, 354, 41, 99, 41, 409, 89,
	-175, 125, 105, 106, -327, -328, 89, -396, -398, -319,
	83, -260, -262, 89, -298, -363, -363, -256, -177, 35,
	-257, -296, -391, -135, -134, -256, 83, -464, 161, 99,
	143, 99, 99, -302, -302, -464, -453, 21, 84, -432,
	84, -432, 83, 125, -366, -452, -455, 61, -252, 104,
	-366, 89, -262, -263, 41, 295, 291, 125, 125, -264,
	41, 275, 276, -274, 83, 306, 15, 194, 83, 110,
	110, -236, -396, -396, -528, 336, 337, 338, 342, 340,
	341, 339, -528, -396, -396, 83, -419, -418, -366, -339,
	-339, 152, -568, -198, -201, -526, -343, 247, 21, 21,
	-343, -343, -323, 608, 99, 89, 442, -275, -475, 609,
	-503, -445, -260, 125, 84, -443, 117, 408, 412, -364,
	-367, 99, 101, 186, 155, 84, 84, 351, -343, -330,
	-329, 89, 89, 89, 308, 541, -172, 60, 488, 89,
	90, 403, 89, 90, 354, -167, 89, 645, 157, 125,
	84, 157, -467, -370, -433, 263, -177, 157, -296, -331,
	-136, -433, -259, -297, -343, 89, -482, 169, 327, 542,
	99, 143, 99, -197, -465, 169, 327, -436, 84, 84,
	84, -432, 99, 84, -459, -456, 83, -296, 265, 135,
	89, 89, 99, 83, -493, 31, 89, -397, 83, 84,
	84, 84, 84, -396, 99, -260, -339, 84, 84, 157,
	83, 21, -323, -476, 610, 89, -512, 445, -506, -504,
	440, 441, 442, 443, 89, -442, -443, 412, -364, -367,
	604, 452, 452, 452, -343, 244, 645, 157, 125, -450,
	-219, -343, 306, 425, -328, 89, -399, -398, -192, 84,
	-434, 315, 21, -296, -339, -434, 84, 157, -339, -339,
	327, 99, 143, 99, -198, 327, -448, 314, 84, -459,
	-296, -458, -457, 313, 266, 83, 84, -370, -382, -339,
	84, -277, -276, 538, -396, -399, 81, -399, 81, -399,
	81, -399, 81, 84, -260, -343, 247, -324, -343, -507,
	89, -514, 245, -510, -511, 444, -504, 21, 442, 21,
	21, -137, 157, 114, 453, 453, 453, 351, -329, 89,
	89, -218, 35, 447, 381, -400, 253, 347, 348, 93,
	542, 334, 335, -192, 21, -435, -260, -297, -363, -363,
	99, 99, 84, 157, -343, 262, 83, -377, -371, -370,
	262, 84, -343, -281, -279, -280, 80, 459, 304, 305,
	84, -528, -528, -528, -528, -282, 84, 157, -521, 83,
	99, -509, -508, -510, 21, -507, 21, -507, -507, 449,
	-442, -343, 89, -339, -339, 89, 89, 333, -319, 83,
	-447, -457, -456, -377, 84, 157, -418, -280, 80, -279,
	80, 16, 15, -399, -399, -399, -399, -343, -524, 31,
	84, -520, -519, -320, -515, -343, 445, 446, 89, -507,
	125, -599, -598, 627, 99, 99, -343, -432, -437, 84,
	-371, -278, 301, 302, 31, 169, -278, -523, -522, -321,
	84, 157, 156, 89, 89, 84, -453, 104, 41, 303,
	157, 125, -519, -343, -522, 41, -370, 156, -343,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 0, 0,
	0, 0, 0, 690, 691, 0, 654, 0, 0, 0,
	0, 0, 0, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 0,
	336, 332, 255, 256, 257, 258, 259, 260, 343, 344,
	508, 0, 0, 0, 0, 773, -2, 99, 0, 0,
	0, 0, 325, 0, 316, 316, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, -2,
	703, 0, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 396,
	397, 398, 392, 393, 395, 394, -2, 0, 703, 0,
	0, 0, 781, 0, 0, 0, 824, 846, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1356,
	1357, 1358, 1359, 2144, 2114, -2, 1882, 1859, 2038, 2039,
	1936, 1948, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
	2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
	2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
	2223, 2224, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 0, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	-2, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, -2, -2,
	-2, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
	2163, 2164, 0, 309, 307, 1829, 1859, 1882, 1936, 1948,
	1949, 1986, 2038, 2039, 2071, 2114, 2130, 2131, 2132, 2144,
	0, 0, 959, 0, 751, 0, 0, 756, 1305, 751,
	337, 692, 693, 781, 807, 652, 0, 374, 0, 1873,
	378, 2121, 0, 0, 0, 649, 368, 369, 370, 371,
	372, 373, 0, 0, 932, 0, 0, 364, 0, 331,
	1938, 2143, 1360, 0, 0, 0, 0, 0, 198, 1083,
	200, 1085, 204, 212, 0, 0, 0, 217, 218, 221,
	222, 223, 224, 225, 0, 229, 0, 231, 234, 0,
	236, 237, 0, 240, 241, 242, 0, 252, 253, 254,
	1086, 1087, 1088, -2, 127, 957, 1787, 1673, 0, 1680,
	1693, 1704, 1437, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 1477, 2179, 2220, 2221, 0,
	1457, 1458, 1459, 1460, 1461, 1462, 138, 150, 151, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 0, 1734, 1735, 1736,
	1644, 1424, 1356, 0, 2188, 0, 2210, 2215, 2216, 2217,
	2218, 2209, 0, 0, 1629, 0, 1619, 0, 0, -2,
	-2, 0, 0, 2011, -2, 2222, 2223, 2224, 2185, 2206,
	2214, 2189, 2190, 2213, 2181, 2182, 2183, 2176, 2177, 2178,
	2180, 2192, 2194, 2205, 0, 2201, 2211, 2212, 2119, 0,
	0, 0, 0, 0, 2161, 152, 153, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1640, -2, -2, 1643, -2, 1646,
	-2, -2, -2, -2, 1651, 1652, -2, 1654, -2, -2,
	-2, -2, -2, -2, -2, 1631, 1632, 1633, 1634, 1623,
	1624, 1625, 1626, 1627, 1628, -2, -2, -2, 807, 882,
	0, 807, 0, 782, 829, 832, 835, 838, 785, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 327, 315, 317, 0, 321, 0, 314,
	1119, 1119, 1119, 0, 0, 0, 0, 1119, 1119, 1119,
	1119, 1119, 0, 1119, 0, 0, 0, 0, 0, 1119,
	0, 992, 1090, 1091, 1092, 1117, 1118, 1191, 0, 0,
	0, 708, 704, 705, 706, 707, 795, 0, 797, 800,
	0, 0, 629, 629, 855, 855, 575, 0, 0, 0,
	629, 0, 589, 581, 0, 0, 0, 629, 0, 0,
	802, 802, 0, 632, 639, 629, 629, -2, 629, 629,
	626, 629, 0, 0, 1131, 595, 596, 597, 581, 581,
	600, 601, 602, 612, 613, 640, 1811, 0, 0, 508,
	508, 0, 508, 508, 0, 508, 508, 508, 710, 0,
	1981, 1880, 1954, 1938, 2143, 0, 282, 2011, 287, 0,
	1881, 1900, 0, 0, 1918, 0, -2, 0, 353, 807,
	0, 0, 781, 0, 0, 0, 0, 508, 508, 508,
	508, 508, 1190, 508, 508, 508, 508, 508, 0, 0,
	0, 508, 508, 508, 508, 0, 0, 847, 848, 843,
	844, 845, 849, 850, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 106, 105, 1897, 0, 1788, 1806, 1739,
	1740, 1741, 1793, 1743, 1797, 1797, 1797, 1797, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1797, 1797,
	0, 0, 1786, 1763, 1795, 1795, 1795, 1793, 1790, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1800, 1800, 1803, 1803, 1800, 0, 410,
	408, 409, 1669, 0, 0, 0, 0, 751, 755, 1303,
	0, 0, 0, 807, -2, 0, 0, 653, 375, 1361,
	0, 0, 379, 0, 380, 0, 0, 0, 399, 0,
	402, 387, 388, 389, 383, 0, 178, 0, 366, 367,
	0, 0, 333, 0, 0, 0, 509, 0, 0, 0,
	0, 0, 0, 209, 205, 213, 216, 226, 233, 0,
	245, 247, 250, 206, 214, 219, 220, 227, 248, 207,
	210, 211, 215, 249, 251, 208, 228, 232, 246, 230,
	235, 238, 239, 244, 0, 179, 0, 0, 0, 0,
	0, 1679, 0, 0, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 1673, 0, 0, 1443, 1444, 1445, 1446, 0, 1450,
	0, 1478, 0, 0, 0, 0, 0, 1733, 1737, 0,
	1669, 1669, 0, 1669, 1665, 0, 0, 0, 0, 0,
	0, 1669, 1602, 0, 0, 1604, 1620, 0, 0, 1606,
	1607, 0, 1610, 1611, 1669, 0, 1669, 1615, 1669, 1669,
	1669, 1598, 1599, 0, 1665, 1665, 1665, 1665, 0, 0,
	1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
	1665, 1665, 1665, 1665, 0, 0, 0, 0, 802, 0,
	808, 0, -2, 0, 826, 828, 830, 831, 833, 834,
	836, 837, 839, 840, 787, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 0, 324, 0, 0, 0, 0, 0, 956, 0,
	0, 1119, 1119, 1119, 993, 0, 0, 0, 0, 0,
	0, 0, 0, 1119, 1119, 1119, 1119, 0, 1137, 0,
	0, 0, 710, 709, 0, 796, 0, 0, 0, 568,
	569, 570, 855, 0, 0, 572, 573, 0, 574, 0,
	581, 629, 629, 587, 588, 583, 582, 635, 636, 632,
	0, 632, 632, 855, 0, 606, 607, 608, 629, 629,
	614, 803, 0, 615, 616, 632, 0, 637, 638, 855,
	0, 0, 855, 855, 0, 624, 625, 627, 629, 0,
	0, 1119, 0, 645, 583, 583, 1812, 1813, 0, 0,
	1128, 0, 0, 0, 0, 648, 0, 0, 0, 0,
	711, 0, 262, 265, 0, 268, 0, 1981, 0, 1981,
	0, 275, 0, 0, 0, 0, 0, 0, 305, 306,
	0, 0, 0, 0, 296, 299, 1297, 1298, 1080, 1081,
	300, 301, 345, 346, 0, 802, 825, 827, 821, 822,
	823, 0, 0, 0, 0, 0, 0, 0, 508, 0,
	0, 0, 0, 0, 686, 0, 972, 688, 0, 0,
	0, 0, 0, 863, 857, 859, 927, 138, 863, 8,
	123, 120, 0, 19, 0, 0, 19, 19, 0, 19,
	310, 0, 1809, 1807, 1808, 1742, 1794, 0, 1768, 0,
	1769, 1770, 1771, 1782, 1783, 0, 0, 1764, 0, 1765,
	1766, 1767, 1758, 0, 1759, 1760, 0, 1761, 1762, 308,
	407, 0, 0, 1670, 960, 0, 729, 743, 724, 0,
	732, 0, 0, 1305, 0, 0, 0, 712, 743, 714,
	0, 732, 802, 779, 0, 757, 0, 0, 376, 0,
	384, 381, 0, 385, 0, 0, 401, 403, 404, 405,
	390, 391, 650, 362, 363, 354, 355, 356, 357, 358,
	359, 360, 361, 0, 0, 0, 365, 148, 0, 334,
	335, 0, 0, 0, 192, 193, 194, 195, 196, 197,
	199, 183, 675, 677, 1072, 1084, 0, 1075, 0, 202,
	243, 175, 0, 0, 0, 1674, 1675, 1676, 1677, 1678,
	1683, 0, 1685, 1687, 1689, 1691, 0, 1709, -2, -2,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1694, 1707, 1708, 0, 0, 0, 0, 0,
	0, 1705, 1705, 1700, 0, 1463, 1299, 1300, 1441, 0,
	0, 1475, 1479, 0, 0, 0, 0, 0, 139, 1664,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 0,
	0, 1673, 0, 0, 0, 1666, 1667, 0, 0, 0,
	1557, 0, 0, 1563, 1564, 1565, 0, 738, 0, 1630,
	1603, 1621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	883, 0, 747, 749, 750, 776, 757, 783, 0, 0,
	0, 98, 103, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 71, 73, 0, 1132, 0, 1134, 328, 329,
	0, 0, 323, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 1008, 1009, 506, 1066, 0, 0,
	0, 1082, 1107, 1115, 0, 0, 0, 0, 0, 1164,
	994, 999, 1000, 1001, 995, 996, 1002, 1003, 0, 798,
	0, 0, 896, 70, 571, 630, 631, 856, 578, 1938,
	583, 855, 855, 590, 584, 591, 634, 592, 593, 594,
	632, 855, 855, 804, 629, 632, 617, 633, 632, 1305,
	621, 0, 628, 1305, 646, 1305, 0, 644, 598, 599,
	1166, 800, 423, 424, 425, 427, 0, 476, 476, 476,
	459, 476, 0, 0, 447, 1814, 0, 0, 0, 0,
	456, 1814, 0, 0, 1814, 1814, 1814, 1814, 1814, 1814,
	1814, 0, 0, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
	1814, 1814, 1814, 1814, 0, 1814, 1814, 1814, 1814, 1814,
	1283, 1814, 0, 1129, 466, 467, 468, 469, 474, 475,
	0, 0, 503, 0, 0, 1007, 0, 506, 0, 1049,
	868, 0, 869, 870, 866, 898, 922, 922, 0, 922,
	902, 1305, 0, 0, 0, 273, 274, 263, 0, 264,
	0, 276, 277, 0, 279, 280, 281, 288, 1880, 1954,
	283, 285, 0, 0, 289, 302, 303, 304, 0, 0,
	294, 295, 0, 0, 348, 349, 351, 0, 757, 1133,
	72, 672, 1301, 673, 674, 678, 0, 0, 681, 682,
	683, 684, 685, 974, 0, 0, 1058, 1059, 1060, 1061,
	855, 0, 864, 0, 860, 928, 0, 930, 0, 855,
	0, 121, 19, 0, 114, 111, 0, 0, 0, 0,
	0, 1789, 1738, 1810, 0, 0, 0, 1791, 0, 0,
	0, 0, 0, 104, 759, 719, 0, 723, 740, 0,
	744, 0, 0, 736, 728, 733, 0, 0, 753, 720,
	1304, 0, 0, 0, 713, 0, 0, 718, 757, 0,
	780, 809, 810, 813, 1362, 0, 386, 382, 400, 0,
	508, 0, 0, 0, 186, 1069, 0, 187, 191, 181,
	0, 0, 0, 1074, 0, 1071, 1076, 0, 201, 0,
	0, 176, 177, 1149, 1158, 0, 0, 0, 1684, 1686,
	1688, 1690, 1692, 0, 1695, 1705, 1705, 1701, 0, 1696,
	0, 1698, 0, 1674, 1447, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 1547, 1548, 0, 0, 1552,
	0, 1554, 1555, 1556, 1558, 0, 0, 0, 1562, 0,
	1601, 1622, 1605, 1608, 0, 1612, 0, 1614, 1616, 1617,
	1618, 0, 807, 807, 0, 0, 1519, 1519, 1519, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 1465, 1466, 0, 0,
	0, 884, 777, 0, 0, 0, 0, 0, 1156, 0,
	86, 0, 0, 0, 0, 93, 0, 0, 74, 75,
	330, 318, 320, 0, 0, 1120, 0, 0, 0, 0,
	0, 962, 963, 965, 0, 968, 969, 970, 974, 800,
	0, 800, 1019, 1814, 510, 0, 0, 1068, 0, 1038,
	0, 0, 0, -2, 0, 0, 1115, 0, 0, 0,
	1168, 0, 0, 0, 697, 701, 23, 801, 0, 576,
	0, 577, 629, 585, 586, 855, 609, 610, 0, 0,
	855, 629, 629, 620, 632, 641, 0, 642, 1305, 1168,
	0, 0, 1128, 1234, 1202, 437, 0, 1317, 1318, 477,
	0, 1324, 1333, 1119, 1394, 0, 1333, 0, 0, 1335,
	1336, 0, 0, 0, 0, 460, 461, 0, 446, 0,
	0, 0, 0, 0, 0, 445, 0, 0, 487, 0,
	0, 0, 0, 0, 1815, 1814, 1814, 0, 454, 455,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	1814, 1814, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1274, 0, 0, 0, 0, 0, 0,
	0, 1289, 1290, 0, 1019, 1814, 0, 0, 0, 0,
	510, 1036, 1054, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 887, 0, 0, 0, 0, 0, 800,
	923, 0, 925, 926, 900, -2, 0, 868, 905, 1669,
	0, 266, 267, 0, 0, 272, 290, 292, 0, 0,
	0, 291, 293, 297, 298, 347, 350, 352, 819, 0,
	0, 1192, 0, 975, 976, 978, 979, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1864, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 973, 689, 853, 858, 865, 929, 931,
	139, 861, 853, 0, 124, 19, 123, 115, 116, 0,
	19, 0, 0, 0, 0, 1799, 1798, 1784, 0, 1785,
	1796, 1801, 0, 1804, 0, 411, 763, 0, 0, 743,
	745, 0, 0, 743, 0, 0, 752, 0, 0, 0,
	0, 0, 0, 743, 819, 759, 0, 816, 814, 815,
	0, 0, 651, 149, 406, 0, 0, 0, 0, 0,
	676, 0, 1073, 183, 0, 0, 203, 0, 0, 0,
	1158, 1153, 1668, 1697, 1699, 0, 1706, 1702, 1442, 1451,
	1476, 0, 0, 1482, 1494, 1494, 0, 0, 0, 1485,
	1797, 1797, 1488, 1793, 1795, 1793, 1494, 1494, 0, 140,
	0, 0, 1553, 0, 0, 0, 739, 0, 0, 0,
	1515, 1517, 1519, 1519, 1526, 1520, 1527, 1528, 1519, 1519,
	1519, 1519, 1533, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
	1519, 1519, 1519, 1513, 0, 0, 1727, 1728, 748, 0,
	0, 790, 791, 792, 793, 794, 0, 0, 61, 61,
	1158, 0, 97, 87, 0, 0, 0, 0, 0, 76,
	322, 0, 77, 78, 0, 0, 85, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 1310, 0, 1023, 1020,
	1021, 1022, 0, 1063, 511, 512, 513, 514, 0, 0,
	0, 1067, 0, 0, 1031, 0, 0, 0, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, -2, 1123, 0, 0, 0,
	1310, 1142, 0, 0, 1147, 1310, 1310, 0, 1176, 0,
	1165, 751, 0, -2, 0, 0, 699, 0, 0, 897,
	579, 855, 603, 805, 806, 1305, 855, 855, 629, 647,
	643, 1176, 1167, 0, 426, 476, 0, 1222, 0, 0,
	1228, 0, 1235, 430, 0, 478, 0, 1323, 1350, 1334,
	1350, 1395, 1350, 1350, 1119, 0, 478, 0, 0, 448,
	484, 0, 0, 0, 0, 0, 444, 481, 813, 431,
	433, 434, 435, 485, 486, 488, 0, 490, 491, 450,
	462, 463, 464, 465, 0, 0, 0, 457, 470, 471,
	472, 473, 432, 1251, 1252, 1253, 1256, 1257, 1258, 1259,
	0, 0, 1262, 1263, 1264, 1265, 1266, 1347, 1348, 1349,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1291, 1292, 1293,
	1294, 1295, 1296, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 0, 0, 1286, 0, 0, 1023, 0, 0, 0,
	0, 0, 1063, 1038, 0, 1056, 0, 1050, 1051, 0,
	0, 721, 855, 340, 0, 892, 885, 0, 874, 889,
	890, 891, 877, 0, 879, 0, 875, 876, 855, 867,
	899, 924, 901, 904, 906, 907, 913, 0, 0, 0,
	0, 261, 269, 270, 271, 278, 0, 530, 284, 775,
	0, 1302, 679, 680, 1193, 1194, 687, 0, 980, 851,
	0, 0, 851, 119, 122, 0, 117, 0, 0, 0,
	0, 109, 107, 1792, 0, 0, 765, 163, 0, 0,
	0, 741, 0, 746, 743, 727, 737, 726, 734, 735,
	754, 1306, 1307, 1308, 1309, 743, 717, 716, 778, 763,
	811, 812, 0, 1363, 377, 0, 1070, 183, 188, 189,
	190, 184, 182, 1077, 0, 1079, 0, 1151, 0, 0,
	1703, 1481, 1452, 1483, 1495, 1496, 1484, 0, 1454, 1455,
	1486, 1487, 1489, 1490, 1491, 1492, 1493, 1456, 1549, 0,
	1551, 1559, 1560, 0, 1609, 1613, 0, 0, 0, 0,
	0, 1524, 1525, 1529, 1530, 1531, 1532, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 807, 1514, 0,
	0, 0, 0, 0, 0, 0, 788, 0, 0, 0,
	63, 0, 63, 1157, 1159, 0, 927, 0, 0, 94,
	0, 0, 79, 80, 0, 0, 0, 955, 958, 964,
	966, 0, 0, 0, 1311, 1312, 1314, 1315, 1316, 0,
	991, 0, 0, 1011, 1012, 1013, 1025, 0, 0, 0,
	516, 517, 0, 0, 0, 529, 525, 526, 527, 507,
	1062, 1045, 0, 0, 1034, 0, 0, 1044, 0, 1124,
	1814, 1814, 1814, 0, 0, 1236, 1814, 1814, 0, 1144,
	1146, 0, 0, 1240, 1179, 0, 0, 1170, 0, 922,
	0, 0, 855, 698, 701, 702, 799, 580, 618, 622,
	619, 855, 1179, 422, 1200, 0, 0, 0, 0, 0,
	1232, 0, 0, 1204, 0, 449, 479, 0, -2, 0,
	1351, 0, 1337, 1351, 0, 0, 1350, 0, 438, 478,
	0, 0, 0, 492, 496, 497, 0, 494, 1390, 0,
	495, 0, 483, 0, 489, 1254, 1255, 0, 1260, 1261,
	0, 1285, 0, 0, 429, 498, 0, 0, 0, 499,
	500, 505, 1031, 0, 1045, 0, 1055, 0, 1052, 1053,
	807, 0, 0, 871, 893, 0, 0, 872, 0, 873,
	878, 880, 339, 908, 0, 0, 910, 911, 912, 903,
	286, 820, 977, 0, 841, 0, 0, 862, 842, 0,
	19, 0, 0, 112, 1802, 1805, 767, 0, 764, 164,
	0, 0, 0, 0, 731, 742, 725, 715, 765, 817,
	818, 185, 180, 1078, 1161, 0, 1152, 0, 0, 1561,
	0, 1519, 1516, 1519, 1518, 1510, 0, 1467, 0, 1469,
	1470, 1471, 0, 1473, 1474, 0, 786, 0, 59, 0,
	62, 60, 0, 96, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 1240, 0, 997, 1024, 1010, 0,
	1064, 1065, 0, 518, 519, 0, 522, 528, 1026, 0,
	0, 1028, 1029, 1030, 0, 0, 1042, 0, 0, 0,
	0, 1116, 1130, 0, 0, 0, -2, 0, -2, 1141,
	0, 1185, 0, 1177, 0, 1169, 0, 1172, 855, 855,
	-2, 695, 700, 0, 623, 1185, 1202, 0, 1223, 0,
	0, 0, 0, 0, 0, 0, 1203, 0, 1216, 480,
	1352, -2, 1366, 1368, 0, 1129, 1371, 1372, 0, 0,
	0, 0, 0, 0, 1416, 1380, 0, 0, 1384, 1385,
	1386, 0, 0, 1389, 0, 1721, 1722, 0, 1393, 0,
	0, 0, 0, 0, 0, 0, 1331, 439, 440, 0,
	442, 443, 1814, 1391, 482, 436, 1814, 452, 1284, 1287,
	1288, 504, 501, 502, 1034, 1037, 1048, 1057, 722, 802,
	341, 342, 894, 0, 886, 917, 914, 0, 0, 981,
	852, 854, 113, 118, 0, 0, 769, 0, 766, 0,
	760, 762, 174, 730, 767, 134, 166, 0, 0, 1453,
	1550, 1600, 1522, 1523, 0, 1511, 0, 1505, 1506, 1507,
	1512, 0, 0, 789, 784, 64, 90, 0, 0, 95,
	68, 81, 0, 0, 0, 0, 983, 990, 1004, 1135,
	1313, 989, 0, 0, 515, 520, 0, 523, 524, 1046,
	1045, 0, 1032, 1033, 0, 1040, 0, 0, 1103, 1793,
	0, 1125, 1126, 1127, 1237, 1238, 1239, 1195, 1143, 0,
	-2, 1248, 0, 1139, 1161, 1195, 0, 1173, 0, 1180,
	0, 1178, 1171, 807, 696, 1182, 428, 1234, 1224, 0,
	1226, 0, 0, 0, 0, 1205, -2, 0, 1367, 1369,
	1370, 1373, 1374, 1375, 1421, 1422, 1423, 0, 0, 1378,
	1418, 1419, 1420, 1379, 0, 0, 0, 0, 0, 1719,
	1720, 1414, 0, 0, 1338, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1339, 0, 0, 0, 1330, 1332, 441, 0,
	0, 1814, 1047, 338, 0, 0, 918, 920, 915, 916,
	108, 110, 125, 0, 768, 165, 0, 769, 136, 0,
	157, 0, 1162, 0, 1521, 1508, 0, 0, 0, 0,
	0, 1723, 1724, 1725, 0, 1468, 1472, 0, 89, 0,
	66, 0, 82, 83, 0, 0, 0, 1005, 1006, 1014,
	1015, 0, 1017, 1018, 521, 1027, 1035, 1039, 1042, 0,
	1094, 0, 813, 0, 1197, 0, 1145, 1128, 1250, 1814,
	1148, 1197, 0, 1242, 1814, 1814, 1163, 0, 1175, 0,
	1187, 0, 1181, 802, 421, 0, 1184, 1220, 1225, 1227,
	1229, 0, 1233, 1231, 1206, -2, 0, 1214, 0, 0,
	1376, 1377, 0, 0, 1619, 1814, 0, 1409, 0, 1094,
	1094, 1094, 1094, 0, 493, 451, 0, 895, 909, 0,
	0, 0, 758, 126, 0, 135, 154, 0, 167, 168,
	0, 0, 0, 0, 1154, 0, 1497, 0, 0, 0,
	1501, 1502, 1503, 1504, 91, 0, 65, 68, 0, 0,
	0, 982, 0, 1016, 1041, 1043, 1093, 1104, 1105, 813,
	1138, 0, 1234, 1249, 0, 1140, 1241, 0, 0, 0,
	1174, 1186, 0, 1189, 694, 1183, 1201, 0, 1230, 1207,
	1215, 0, 1210, 0, 0, 0, 1417, 0, 1383, 0,
	1388, 1397, 1410, 0, 0, 1319, 0, 1321, 0, 1325,
	0, 1327, 0, 0, 453, 919, 921, 0, 771, 761,
	137, 141, 0, 163, 160, 0, 169, 0, 0, 0,
	0, 1150, 0, 0, 1498, 1499, 1500, 0, 67, 69,
	84, 0, 984, 985, 998, 1095, 1814, 1814, 0, 0,
	0, 1101, 1102, 1106, 0, 1222, 1254, 1243, 1244, 1245,
	1188, 1221, 1209, 0, -2, 1217, 0, 0, 1671, 1681,
	1682, 1381, 1387, 1396, 1398, 1399, 0, 1411, 1412, 1413,
	1415, 1094, 1094, 1094, 1094, 1329, 770, 0, 128, 0,
	0, 158, 159, 161, 0, 170, 0, 172, 173, 0,
	1509, 92, 986, 0, 0, 1098, 1099, 0, 1198, 0,
	1200, 1211, -2, 0, 1219, 0, 1382, 1400, 0, 1401,
	0, 0, 0, 1320, 1322, 1326, 1328, 772, 1160, 0,
	142, 0, 144, 146, 147, 1353, 155, 156, 162, 171,
	0, 971, 987, 0, 1096, 1097, 1100, 0, 1202, 1218,
	1672, 1402, 1404, 1405, 0, 0, 1403, 129, 130, 0,
	143, 0, 0, 1155, 988, 1199, 1196, 1406, 1408, 1407,
	0, 0, 145, 1354, 131, 132, 133, 0, 1355,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 646, 643,
	126, 125, 127, 3, 647, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 644, 138, 645, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:827
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:834
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:840
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:848
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:854
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:888
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:925
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:950
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:966
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:975
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:981
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:995
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:999
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1003
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1007
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1014
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1038
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1063
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1072
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1082
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1092
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1104
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1135
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1146
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1160
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1176
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1193
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1282
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1308
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1315
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1323
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1329
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1364
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1382
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1407
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1416
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1436
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1440
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1446
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1465
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1469
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1475
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1488
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1494
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1515
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1546
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1550
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1556
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1571
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1575
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1587
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1591
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1605
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1609
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1614
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1621
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1629
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1635
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1644
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1655
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1659
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1675
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1679
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1685
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1709
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1728
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1732
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1736
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1741
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1745
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1754
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1764
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1771
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1776
		{
			yyVAL.str = "\n"
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1783
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1792
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1820
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1824
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1830
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1838
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1858
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1877
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1902
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1906
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1910
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1915
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1919
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1938
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1949
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1962
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1966
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1976
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2014
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2022
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2032
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2050
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2054
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2058
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2069
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2073
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2079
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2086
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2095
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2099
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2109
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2113
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2117
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2121
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2125
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2328
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2342
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2352
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2356
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2362
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2369
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2377
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2395
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2399
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2412
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2419
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2428
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2458
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2472
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2489
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2495
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2499
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2505
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2522
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2547
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2570
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2607
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2622
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2638
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2662
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2666
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2672
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2676
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2693
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2698
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2702
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2730
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2758
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2803
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2816
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2832
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2850
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2861
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2865
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2871
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2881
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2887
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2891
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2897
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2903
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2907
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2915
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2921
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2954
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2960
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2966
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2977
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2983
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3003
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3011
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3029
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3045
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3053
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3104
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3110
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3116
		{
			yyVAL.str = yyDollar[1].str
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3121
		{
			yyVAL.str = "true"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3122
		{
			yyVAL.str = "false"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3123
		{
			yyVAL.str = yyDollar[1].str
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3128
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3134
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3143
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3150
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3158
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3162
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3186
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3209
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3219
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3226
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3235
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3239
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3245
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3249
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3283
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3293
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3309
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3331
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3337
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3341
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3347
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3353
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3361
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3371
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3379
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3389
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3399
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3409
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3416
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3420
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3428
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3432
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3439
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3445
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3449
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3453
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3457
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3461
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3465
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3469
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3473
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3478
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3509
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3513
		{
			yyVAL.str = string("COLUMN")
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3518
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3524
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3530
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3538
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3542
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3548
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3556
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3563
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3569
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3575
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3581
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3587
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3594
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3601
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3609
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3615
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3652
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3670
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3685
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3700
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3728
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3734
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3745
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3762
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3770
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3774
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3783
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3799
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3803
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3807
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3811
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3818
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3822
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3830
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3837
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3841
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3848
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3852
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3856
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3860
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3867
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3880
		{
			yyVAL.item = nil
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3885
		{
			yyVAL.item = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3933
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3939
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3945
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3951
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3960
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3968
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3976
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3984
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3988
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3992
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4007
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4013
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4018
		{
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4022
		{
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4037
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4047
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4061
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4067
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4073
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4079
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4091
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4124
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4143
		{
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4145
		{
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4154
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4164
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4173
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4177
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4181
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4193
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4225
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4245
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4251
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4263
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4277
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4283
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4289
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4305
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4309
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4313
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4318
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4322
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4328
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4343
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4347
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4353
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4361
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4368
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4376
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4382
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4388
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4393
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4401
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4407
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4412
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4418
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4456
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4464
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4472
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4480
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4484
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4490
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4503
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4511
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4520
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4526
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4534
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4542
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4550
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4556
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4564
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4570
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4578
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4584
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4594
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4599
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4606
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4622
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4635
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4646
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4650
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4656
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4662
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4671
		{
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4673
		{
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4676
		{
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4685
		{
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4689
		{
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4694
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4703
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4710
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4716
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4724
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4731
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4738
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4758
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4766
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4776
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4780
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4786
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4793
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4799
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4807
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4814
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4821
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4840
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4844
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4848
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4853
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4857
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4861
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4867
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4876
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4880
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4886
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4890
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4896
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4900
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4906
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4911
		{
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4922
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4926
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4933
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4938
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4942
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4948
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4952
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4958
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4962
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4967
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4971
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4995
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5006
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5028
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5051
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5059
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5068
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5072
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5085
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5089
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5094
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5098
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5105
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5110
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5117
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5123
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5127
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5135
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5139
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5143
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5148
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5152
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5158
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5168
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5183
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5187
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5201
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5205
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5211
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5224
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5228
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5232
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5236
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5242
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5249
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5258
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5262
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5268
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5280
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5285
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5289
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5295
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5299
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5308
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5312
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5318
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5324
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5328
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5334
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5339
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5343
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5347
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5352
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5356
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5360
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5369
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5377
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5381
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5385
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5399
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5403
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5413
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5423
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5433
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5445
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5453
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5461
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5470
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5486
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5502
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5510
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5518
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5526
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5534
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5544
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5555
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5569
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5573
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5577
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5582
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5590
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5599
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5603
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5612
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5617
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5621
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5627
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5631
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5637
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5641
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5645
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5649
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5654
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5662
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5668
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5676
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5684
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5694
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5700
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5709
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5718
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5727
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5737
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5741
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5751
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5755
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5759
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5763
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 881:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5769
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5779
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5783
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5789
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5795
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5799
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5805
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5811
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5815
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5819
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5823
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5829
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5833
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5839
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5843
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5849
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5853
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5859
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5863
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5873
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5886
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5892
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5898
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5912
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5923
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5930
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5934
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5940
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5950
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5954
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5958
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5963
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5967
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5971
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5975
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5980
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5984
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5988
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5992
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5996
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6001
		{
			yyVAL.str = ""
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6005
		{
			yyVAL.str = yyDollar[1].str
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6009
		{
			yyVAL.str = yyDollar[2].str
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6015
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6019
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6024
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6028
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6032
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6036
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6040
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6046
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 955:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6088
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6101
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6107
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 958:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6113
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6126
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6131
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6138
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6145
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6149
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6155
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6161
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6166
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6170
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6174
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6185
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6218
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6223
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6230
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6237
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6241
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6247
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6253
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6257
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6261
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6267
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6273
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6279
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6283
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6289
		{
			yyVAL.str = ""
		}
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6296
		{
			yyVAL.str = yyDollar[2].str
		}
	case 989:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6302
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6317
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6334
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6355
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6361
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6365
		{
			yyVAL.str = "DEFINER = "
		}
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6369
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6374
		{
			yyVAL.str = ""
		}
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6378
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1004:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6392
		{
			yyVAL.str = ""
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6400
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6406
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6411
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6417
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6430
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6435
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6440
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6446
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6453
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6460
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6467
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6474
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6482
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6488
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6495
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6502
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6510
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6516
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6525
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6542
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6558
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6577
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6583
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6592
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6610
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6616
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6623
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6631
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6637
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6645
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6651
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6659
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6665
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6674
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6678
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6683
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6687
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6694
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6699
		{
			yyVAL.str = ""
		}
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6703
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6709
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6722
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6733
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6737
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6743
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6749
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6755
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6762
		{
			yyVAL.str = ""
		}
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6766
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6771
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6775
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6781
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6789
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6797
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6805
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6813
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6818
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6830
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6841
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6950
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6954
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6960
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6973
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6977
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6983
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6996
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7000
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7004
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7013
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7019
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7026
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7032
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7041
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7048
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7059
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7063
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7069
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7078
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7082
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7086
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7091
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7095
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7099
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7103
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7109
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7140
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7144
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7170
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7176
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7188
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7194
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7200
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7206
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7212
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7220
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7224
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7230
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7244
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7258
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7262
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7266
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7270
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7274
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7278
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7282
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7288
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7303
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7307
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7318
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7322
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7331
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7337
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7341
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7347
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7356
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7365
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7371
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7381
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7392
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7398
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7416
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7434
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7452
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7468
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7472
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7481
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7493
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7502
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7514
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7524
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7534
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7545
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7555
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7566
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7574
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7585
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7592
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7602
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7615
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7623
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7632
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7641
		{
			yyVAL.str = ""
		}
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7645
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7651
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7655
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7660
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7664
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7671
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7683
		{
			yyVAL.str = ""
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7687
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1163:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7693
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7714
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7728
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7732
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7736
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7742
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7746
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7753
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7760
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7767
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7774
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7778
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7782
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7786
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7790
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7797
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7804
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7808
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7815
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7826
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7832
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7842
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7849
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7856
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7863
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7870
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7874
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7879
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7883
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7887
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7896
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7913
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7921
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7929
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7933
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7945
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7949
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7955
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7959
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7965
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7978
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7992
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7996
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8002
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8006
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8012
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8021
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8032
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8036
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8041
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8045
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8051
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8056
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8064
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8068
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8078
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8082
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8093
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8101
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8109
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8117
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8128
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8137
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8147
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8157
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8161
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8166
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8170
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8176
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8180
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8186
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8195
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8209
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8215
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8219
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8225
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8234
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8244
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8248
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8254
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8258
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8262
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8268
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8272
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8276
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8280
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8284
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8288
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8292
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8297
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8301
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8305
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8309
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8313
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8317
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8321
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8325
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8329
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8333
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8337
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8341
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8345
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8351
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8357
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8361
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8365
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8369
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8373
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8379
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8385
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8391
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8397
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8403
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8409
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8413
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8417
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8421
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8428
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8432
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8438
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8449
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8453
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8459
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8463
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8467
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8471
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8475
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8479
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8493
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8497
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8506
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8512
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8520
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8524
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8531
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8540
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8548
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8556
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8567
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8577
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8581
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8587
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8591
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8597
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8610
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8623
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8662
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8702
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8716
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8722
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8735
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8748
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8761
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8774
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8789
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8799
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8805
		{
			yyVAL.str = ""
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8809
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8819
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8825
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8831
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8852
		{
			yyVAL.str = ""
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8856
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8862
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8868
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8872
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8877
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8889
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8897
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8903
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8909
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8913
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8918
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8925
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8929
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8935
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8939
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8945
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8949
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8953
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8957
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8961
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8965
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8970
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8974
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8978
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8982
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8986
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8990
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8994
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8998
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9002
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9006
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9020
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9024
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9028
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9032
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9036
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9040
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9046
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9050
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9055
		{
			yyVAL.str = ""
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9059
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9065
		{
			yyVAL.str = ""
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9069
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9075
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9092
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9099
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9106
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9113
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9120
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9129
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9135
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9141
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9145
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9153
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9157
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9162
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9169
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9173
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9177
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9182
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9186
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9191
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9195
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9211
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9217
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9221
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9225
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9233
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9237
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9241
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9245
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9249
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9253
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9257
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9261
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9265
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9271
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9275
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9279
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9287
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9291
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9295
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9299
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9303
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9307
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9349
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9353
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9357
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9362
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9374
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9396
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9408
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9412
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9416
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9420
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9426
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9444
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9455
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9465
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9475
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9484
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9494
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9504
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9514
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9523
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9546
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9552
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9556
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9562
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9571
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9583
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9600
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9630
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9643
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9655
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9699
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9716
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9731
		{
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9738
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9742
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9746
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9752
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9756
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9760
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9764
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9770
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9774
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9784
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9792
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9802
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9806
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9813
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9818
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9822
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9827
		{
			yyVAL.str = ","
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9831
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9836
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9840
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9845
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9852
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9878
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9890
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9902
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9913
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9924
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9935
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9945
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9966
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9977
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9988
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9999
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10010
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10021
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10032
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10043
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10054
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10065
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10076
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10087
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10098
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10109
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10127
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10145
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10154
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10163
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10174
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10183
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10193
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10202
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10211
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10220
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10229
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10241
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10252
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10265
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10277
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10300
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10336
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10349
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10362
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10374
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10383
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10391
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10399
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10412
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10421
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10432
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10452
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10464
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10474
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10484
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10493
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10504
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10513
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10523
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10532
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10541
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10551
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10555
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10565
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10584
		{
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10586
		{
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10627
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10639
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10643
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10647
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10653
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10658
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10662
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10668
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10672
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10678
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10682
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10689
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10693
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10697
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10706
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10710
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10714
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10719
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10723
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10729
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10733
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10737
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10745
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10749
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10753
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10765
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10773
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10777
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10781
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10785
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10789
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10801
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10805
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10815
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10819
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10825
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10829
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10836
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10840
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10844
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10850
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10854
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10858
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10862
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10866
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10870
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10874
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10880
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10884
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10888
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10892
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10898
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10911
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10916
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10922
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10926
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10939
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10944
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10948
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10952
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10956
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10960
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10971
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10986
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10997
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11002
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11020
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11032
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11044
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11057
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11070
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11083
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11148
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11161
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11189
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11216
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11258
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11294
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11330
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11347
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11359
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11379
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11399
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11419
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11435
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11461
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11474
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11487
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11523
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11535
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11547
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11559
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11571
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11583
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11595
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11607
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11620
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11633
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11674
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11682
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11691
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11701
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11724
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11729
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11735
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11742
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11746
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11751
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11755
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11761
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11767
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11774
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11781
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11790
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11797
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11804
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11813
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11817
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11821
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11827
		{
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11829
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11839
		{
			yyVAL.str = ""
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11843
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
